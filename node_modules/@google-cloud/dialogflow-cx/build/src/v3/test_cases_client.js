"use strict";
// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **
Object.defineProperty(exports, "__esModule", { value: true });
exports.TestCasesClient = void 0;
/* global window */
const gax = require("google-gax");
const jsonProtos = require("../../protos/protos.json");
/**
 * Client JSON configuration object, loaded from
 * `src/v3/test_cases_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
const gapicConfig = require("./test_cases_client_config.json");
const google_gax_1 = require("google-gax");
const version = require('../../../package.json').version;
/**
 *  Service for managing {@link google.cloud.dialogflow.cx.v3.TestCase|Test Cases} and
 *  {@link google.cloud.dialogflow.cx.v3.TestCaseResult|Test Case Results}.
 * @class
 * @memberof v3
 */
class TestCasesClient {
    /**
     * Construct an instance of TestCasesClient.
     *
     * @param {object} [options] - The configuration object.
     * The options accepted by the constructor are described in detail
     * in [this document](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#creating-the-client-instance).
     * The common options are:
     * @param {object} [options.credentials] - Credentials object.
     * @param {string} [options.credentials.client_email]
     * @param {string} [options.credentials.private_key]
     * @param {string} [options.email] - Account email address. Required when
     *     using a .pem or .p12 keyFilename.
     * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
     *     .p12 key downloaded from the Google Developers Console. If you provide
     *     a path to a JSON file, the projectId option below is not necessary.
     *     NOTE: .pem and .p12 require you to specify options.email as well.
     * @param {number} [options.port] - The port on which to connect to
     *     the remote host.
     * @param {string} [options.projectId] - The project ID from the Google
     *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
     *     the environment variable GCLOUD_PROJECT for your project ID. If your
     *     app is running in an environment which supports
     *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
     *     your project ID will be detected automatically.
     * @param {string} [options.apiEndpoint] - The domain name of the
     *     API remote host.
     * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
     *     Follows the structure of {@link gapicConfig}.
     * @param {boolean} [options.fallback] - Use HTTP fallback mode.
     *     In fallback mode, a special browser-compatible transport implementation is used
     *     instead of gRPC transport. In browser context (if the `window` object is defined)
     *     the fallback mode is enabled automatically; set `options.fallback` to `false`
     *     if you need to override this behavior.
     */
    constructor(opts) {
        var _a, _b;
        this._terminated = false;
        this.descriptors = {
            page: {},
            stream: {},
            longrunning: {},
            batching: {},
        };
        // Ensure that options include all the required fields.
        const staticMembers = this.constructor;
        const servicePath = (opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint) || staticMembers.servicePath;
        const port = (opts === null || opts === void 0 ? void 0 : opts.port) || staticMembers.port;
        const clientConfig = (_a = opts === null || opts === void 0 ? void 0 : opts.clientConfig) !== null && _a !== void 0 ? _a : {};
        const fallback = (_b = opts === null || opts === void 0 ? void 0 : opts.fallback) !== null && _b !== void 0 ? _b : (typeof window !== 'undefined' && typeof (window === null || window === void 0 ? void 0 : window.fetch) === 'function');
        opts = Object.assign({ servicePath, port, clientConfig, fallback }, opts);
        // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
        if (servicePath !== staticMembers.servicePath && !('scopes' in opts)) {
            opts['scopes'] = staticMembers.scopes;
        }
        // Choose either gRPC or proto-over-HTTP implementation of google-gax.
        this._gaxModule = opts.fallback ? gax.fallback : gax;
        // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
        this._gaxGrpc = new this._gaxModule.GrpcClient(opts);
        // Save options to use in initialize() method.
        this._opts = opts;
        // Save the auth object to the client, for use by other methods.
        this.auth = this._gaxGrpc.auth;
        // Set the default scopes in auth client if needed.
        if (servicePath === staticMembers.servicePath) {
            this.auth.defaultScopes = staticMembers.scopes;
        }
        // Determine the client header string.
        const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];
        if (typeof process !== 'undefined' && 'versions' in process) {
            clientHeader.push(`gl-node/${process.versions.node}`);
        }
        else {
            clientHeader.push(`gl-web/${this._gaxModule.version}`);
        }
        if (!opts.fallback) {
            clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
        }
        if (opts.libName && opts.libVersion) {
            clientHeader.push(`${opts.libName}/${opts.libVersion}`);
        }
        // Load the applicable protos.
        this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);
        // This API contains "path templates"; forward-slash-separated
        // identifiers to uniquely identify resources within the API.
        // Create useful helper objects for these.
        this.pathTemplates = {
            agentPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/agents/{agent}'),
            agentValidationResultPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/agents/{agent}/validationResult'),
            entityTypePathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/agents/{agent}/entityTypes/{entity_type}'),
            environmentPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/agents/{agent}/environments/{environment}'),
            experimentPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/agents/{agent}/environments/{environment}/experiments/{experiment}'),
            flowPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/agents/{agent}/flows/{flow}'),
            flowValidationResultPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/agents/{agent}/flows/{flow}/validationResult'),
            intentPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/agents/{agent}/intents/{intent}'),
            locationPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}'),
            pagePathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/agents/{agent}/flows/{flow}/pages/{page}'),
            projectPathTemplate: new this._gaxModule.PathTemplate('projects/{project}'),
            projectLocationAgentEnvironmentSessionEntityTypePathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/agents/{agent}/environments/{environment}/sessions/{session}/entityTypes/{entity_type}'),
            projectLocationAgentSessionEntityTypePathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/agents/{agent}/sessions/{session}/entityTypes/{entity_type}'),
            securitySettingsPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/securitySettings/{security_settings}'),
            testCasePathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/agents/{agent}/testCases/{test_case}'),
            testCaseResultPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/agents/{agent}/testCases/{test_case}/results/{result}'),
            transitionRouteGroupPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/agents/{agent}/flows/{flow}/transitionRouteGroups/{transition_route_group}'),
            versionPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/agents/{agent}/flows/{flow}/versions/{version}'),
            webhookPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/agents/{agent}/webhooks/{webhook}'),
        };
        // Some of the methods on this service return "paged" results,
        // (e.g. 50 results at a time, with tokens to get subsequent
        // pages). Denote the keys used for pagination and results.
        this.descriptors.page = {
            listTestCases: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'testCases'),
            listTestCaseResults: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'testCaseResults'),
        };
        const protoFilesRoot = this._gaxModule.protobuf.Root.fromJSON(jsonProtos);
        // This API contains "long-running operations", which return a
        // an Operation object that allows for tracking of the operation,
        // rather than holding a request open.
        this.operationsClient = this._gaxModule
            .lro({
            auth: this.auth,
            grpc: 'grpc' in this._gaxGrpc ? this._gaxGrpc.grpc : undefined,
        })
            .operationsClient(opts);
        const runTestCaseResponse = protoFilesRoot.lookup('.google.cloud.dialogflow.cx.v3.RunTestCaseResponse');
        const runTestCaseMetadata = protoFilesRoot.lookup('.google.cloud.dialogflow.cx.v3.RunTestCaseMetadata');
        const batchRunTestCasesResponse = protoFilesRoot.lookup('.google.cloud.dialogflow.cx.v3.BatchRunTestCasesResponse');
        const batchRunTestCasesMetadata = protoFilesRoot.lookup('.google.cloud.dialogflow.cx.v3.BatchRunTestCasesMetadata');
        const importTestCasesResponse = protoFilesRoot.lookup('.google.cloud.dialogflow.cx.v3.ImportTestCasesResponse');
        const importTestCasesMetadata = protoFilesRoot.lookup('.google.cloud.dialogflow.cx.v3.ImportTestCasesMetadata');
        const exportTestCasesResponse = protoFilesRoot.lookup('.google.cloud.dialogflow.cx.v3.ExportTestCasesResponse');
        const exportTestCasesMetadata = protoFilesRoot.lookup('.google.cloud.dialogflow.cx.v3.ExportTestCasesMetadata');
        this.descriptors.longrunning = {
            runTestCase: new this._gaxModule.LongrunningDescriptor(this.operationsClient, runTestCaseResponse.decode.bind(runTestCaseResponse), runTestCaseMetadata.decode.bind(runTestCaseMetadata)),
            batchRunTestCases: new this._gaxModule.LongrunningDescriptor(this.operationsClient, batchRunTestCasesResponse.decode.bind(batchRunTestCasesResponse), batchRunTestCasesMetadata.decode.bind(batchRunTestCasesMetadata)),
            importTestCases: new this._gaxModule.LongrunningDescriptor(this.operationsClient, importTestCasesResponse.decode.bind(importTestCasesResponse), importTestCasesMetadata.decode.bind(importTestCasesMetadata)),
            exportTestCases: new this._gaxModule.LongrunningDescriptor(this.operationsClient, exportTestCasesResponse.decode.bind(exportTestCasesResponse), exportTestCasesMetadata.decode.bind(exportTestCasesMetadata)),
        };
        // Put together the default options sent with requests.
        this._defaults = this._gaxGrpc.constructSettings('google.cloud.dialogflow.cx.v3.TestCases', gapicConfig, opts.clientConfig || {}, { 'x-goog-api-client': clientHeader.join(' ') });
        // Set up a dictionary of "inner API calls"; the core implementation
        // of calling the API is handled in `google-gax`, with this code
        // merely providing the destination and request information.
        this.innerApiCalls = {};
    }
    /**
     * Initialize the client.
     * Performs asynchronous operations (such as authentication) and prepares the client.
     * This function will be called automatically when any class method is called for the
     * first time, but if you need to initialize it before calling an actual method,
     * feel free to call initialize() directly.
     *
     * You can await on this method if you want to make sure the client is initialized.
     *
     * @returns {Promise} A promise that resolves to an authenticated service stub.
     */
    initialize() {
        // If the client stub promise is already initialized, return immediately.
        if (this.testCasesStub) {
            return this.testCasesStub;
        }
        // Put together the "service stub" for
        // google.cloud.dialogflow.cx.v3.TestCases.
        this.testCasesStub = this._gaxGrpc.createStub(this._opts.fallback
            ? this._protos.lookupService('google.cloud.dialogflow.cx.v3.TestCases')
            : // eslint-disable-next-line @typescript-eslint/no-explicit-any
                this._protos.google.cloud.dialogflow.cx.v3.TestCases, this._opts);
        // Iterate over each of the methods that the service provides
        // and create an API call method for each.
        const testCasesStubMethods = [
            'listTestCases',
            'batchDeleteTestCases',
            'getTestCase',
            'createTestCase',
            'updateTestCase',
            'runTestCase',
            'batchRunTestCases',
            'calculateCoverage',
            'importTestCases',
            'exportTestCases',
            'listTestCaseResults',
            'getTestCaseResult',
        ];
        for (const methodName of testCasesStubMethods) {
            const callPromise = this.testCasesStub.then(stub => (...args) => {
                if (this._terminated) {
                    return Promise.reject('The client has already been closed.');
                }
                const func = stub[methodName];
                return func.apply(stub, args);
            }, (err) => () => {
                throw err;
            });
            const descriptor = this.descriptors.page[methodName] ||
                this.descriptors.longrunning[methodName] ||
                undefined;
            const apiCall = this._gaxModule.createApiCall(callPromise, this._defaults[methodName], descriptor);
            this.innerApiCalls[methodName] = apiCall;
        }
        return this.testCasesStub;
    }
    /**
     * The DNS address for this API service.
     * @returns {string} The DNS address for this service.
     */
    static get servicePath() {
        return 'dialogflow.googleapis.com';
    }
    /**
     * The DNS address for this API service - same as servicePath(),
     * exists for compatibility reasons.
     * @returns {string} The DNS address for this service.
     */
    static get apiEndpoint() {
        return 'dialogflow.googleapis.com';
    }
    /**
     * The port for this API service.
     * @returns {number} The default port for this service.
     */
    static get port() {
        return 443;
    }
    /**
     * The scopes needed to make gRPC calls for every method defined
     * in this service.
     * @returns {string[]} List of default scopes.
     */
    static get scopes() {
        return [
            'https://www.googleapis.com/auth/cloud-platform',
            'https://www.googleapis.com/auth/dialogflow',
        ];
    }
    /**
     * Return the project ID used by this class.
     * @returns {Promise} A promise that resolves to string containing the project ID.
     */
    getProjectId(callback) {
        if (callback) {
            this.auth.getProjectId(callback);
            return;
        }
        return this.auth.getProjectId();
    }
    /**
     * Batch deletes test cases.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The agent to delete test cases from.
     *   Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>`.
     * @param {string[]} request.names
     *   Required. Format of test case names: `projects/<Project ID>/locations/
     *   <Location ID>/agents/<AgentID>/testCases/<TestCase ID>`.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
     *   for more details and examples.
     * @example
     * const [response] = await client.batchDeleteTestCases(request);
     */
    batchDeleteTestCases(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                parent: request.parent || '',
            });
        this.initialize();
        return this.innerApiCalls.batchDeleteTestCases(request, options, callback);
    }
    /**
     * Gets a test case.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The name of the testcase.
     *   Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent
     *   ID>/testCases/<TestCase ID>`.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing [TestCase]{@link google.cloud.dialogflow.cx.v3.TestCase}.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
     *   for more details and examples.
     * @example
     * const [response] = await client.getTestCase(request);
     */
    getTestCase(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                name: request.name || '',
            });
        this.initialize();
        return this.innerApiCalls.getTestCase(request, options, callback);
    }
    /**
     * Creates a test case for the given agent.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The agent to create the test case for.
     *   Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>`.
     * @param {google.cloud.dialogflow.cx.v3.TestCase} request.testCase
     *   Required. The test case to create.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing [TestCase]{@link google.cloud.dialogflow.cx.v3.TestCase}.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
     *   for more details and examples.
     * @example
     * const [response] = await client.createTestCase(request);
     */
    createTestCase(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                parent: request.parent || '',
            });
        this.initialize();
        return this.innerApiCalls.createTestCase(request, options, callback);
    }
    /**
     * Updates the specified test case.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {google.cloud.dialogflow.cx.v3.TestCase} request.testCase
     *   Required. The test case to update.
     * @param {google.protobuf.FieldMask} request.updateMask
     *   Required. The mask to specify which fields should be updated. The
     *   {@link google.cloud.dialogflow.cx.v3.TestCase.creation_time|`creationTime`} and
     *   {@link google.cloud.dialogflow.cx.v3.TestCase.last_test_result|`lastTestResult`} cannot be updated.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing [TestCase]{@link google.cloud.dialogflow.cx.v3.TestCase}.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
     *   for more details and examples.
     * @example
     * const [response] = await client.updateTestCase(request);
     */
    updateTestCase(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                'test_case.name': request.testCase.name || '',
            });
        this.initialize();
        return this.innerApiCalls.updateTestCase(request, options, callback);
    }
    /**
     * Calculates the test coverage for an agent.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.agent
     *   Required. The agent to calculate coverage for.
     *   Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>`.
     * @param {google.cloud.dialogflow.cx.v3.CalculateCoverageRequest.CoverageType} request.type
     *   Required. The type of coverage requested.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing [CalculateCoverageResponse]{@link google.cloud.dialogflow.cx.v3.CalculateCoverageResponse}.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
     *   for more details and examples.
     * @example
     * const [response] = await client.calculateCoverage(request);
     */
    calculateCoverage(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                agent: request.agent || '',
            });
        this.initialize();
        return this.innerApiCalls.calculateCoverage(request, options, callback);
    }
    /**
     * Gets a test case result.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The name of the testcase.
     *   Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent
     *   ID>/testCases/<TestCase ID>/results/<TestCaseResult ID>`.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing [TestCaseResult]{@link google.cloud.dialogflow.cx.v3.TestCaseResult}.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
     *   for more details and examples.
     * @example
     * const [response] = await client.getTestCaseResult(request);
     */
    getTestCaseResult(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                name: request.name || '',
            });
        this.initialize();
        return this.innerApiCalls.getTestCaseResult(request, options, callback);
    }
    /**
     * Kicks off a test case run.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. Format of test case name to run: `projects/<Project ID>/locations/
     *   <Location ID>/agents/<AgentID>/testCases/<TestCase ID>`.
     * @param {string} [request.environment]
     *   Optional. Environment name. If not set, draft environment is assumed.
     *   Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent
     *   ID>/environments/<Environment ID>`.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
     *   for more details and examples.
     * @example
     * const [operation] = await client.runTestCase(request);
     * const [response] = await operation.promise();
     */
    runTestCase(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                name: request.name || '',
            });
        this.initialize();
        return this.innerApiCalls.runTestCase(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `runTestCase()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
     *   for more details and examples.
     * @example
     * const decodedOperation = await checkRunTestCaseProgress(name);
     * console.log(decodedOperation.result);
     * console.log(decodedOperation.done);
     * console.log(decodedOperation.metadata);
     */
    async checkRunTestCaseProgress(name) {
        const request = new google_gax_1.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new gax.Operation(operation, this.descriptors.longrunning.runTestCase, gax.createDefaultBackoffSettings());
        return decodeOperation;
    }
    /**
     * Kicks off a batch run of test cases.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Agent name. Format: `projects/<Project ID>/locations/<Location ID>/agents/
     *   <AgentID>`.
     * @param {string} [request.environment]
     *   Optional. If not set, draft environment is assumed. Format: `projects/<Project
     *   ID>/locations/<Location ID>/agents/<Agent ID>/environments/<Environment
     *   ID>`.
     * @param {string[]} request.testCases
     *   Required. Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent
     *   ID>/testCases/<TestCase ID>`.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
     *   for more details and examples.
     * @example
     * const [operation] = await client.batchRunTestCases(request);
     * const [response] = await operation.promise();
     */
    batchRunTestCases(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                parent: request.parent || '',
            });
        this.initialize();
        return this.innerApiCalls.batchRunTestCases(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `batchRunTestCases()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
     *   for more details and examples.
     * @example
     * const decodedOperation = await checkBatchRunTestCasesProgress(name);
     * console.log(decodedOperation.result);
     * console.log(decodedOperation.done);
     * console.log(decodedOperation.metadata);
     */
    async checkBatchRunTestCasesProgress(name) {
        const request = new google_gax_1.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new gax.Operation(operation, this.descriptors.longrunning.batchRunTestCases, gax.createDefaultBackoffSettings());
        return decodeOperation;
    }
    /**
     * Imports the test cases from a Cloud Storage bucket or a local file. It
     * always creates new test cases and won't overwite any existing ones. The
     * provided ID in the imported test case is neglected.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The agent to import test cases to.
     *   Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>`.
     * @param {string} request.gcsUri
     *   The [Google Cloud Storage](https://cloud.google.com/storage/docs/) URI
     *   to import test cases from. The format of this URI must be
     *   `gs://<bucket-name>/<object-name>`.
     * @param {Buffer} request.content
     *   Uncompressed raw byte content for test cases.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
     *   for more details and examples.
     * @example
     * const [operation] = await client.importTestCases(request);
     * const [response] = await operation.promise();
     */
    importTestCases(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                parent: request.parent || '',
            });
        this.initialize();
        return this.innerApiCalls.importTestCases(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `importTestCases()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
     *   for more details and examples.
     * @example
     * const decodedOperation = await checkImportTestCasesProgress(name);
     * console.log(decodedOperation.result);
     * console.log(decodedOperation.done);
     * console.log(decodedOperation.metadata);
     */
    async checkImportTestCasesProgress(name) {
        const request = new google_gax_1.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new gax.Operation(operation, this.descriptors.longrunning.importTestCases, gax.createDefaultBackoffSettings());
        return decodeOperation;
    }
    /**
     * Exports the test cases under the agent to a Cloud Storage bucket or a local
     * file. Filter can be applied to export a subset of test cases.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The agent where to export test cases from.
     *   Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>`.
     * @param {string} request.gcsUri
     *   The [Google Cloud Storage](https://cloud.google.com/storage/docs/) URI to
     *   export the test cases to. The format of this URI must be
     *   `gs://<bucket-name>/<object-name>`. If unspecified, the serialized test
     *   cases is returned inline.
     * @param {google.cloud.dialogflow.cx.v3.ExportTestCasesRequest.DataFormat} request.dataFormat
     *   The data format of the exported test cases. If not specified, `BLOB` is
     *   assumed.
     * @param {string} request.filter
     *   The filter expression used to filter exported test cases, see
     *   [API Filtering](https://aip.dev/160). The expression is case insensitive
     *   and supports the following syntax:
     *
     *     name = <value> [OR name = <value>] ...
     *
     *   For example:
     *
     *   *   "name = t1 OR name = t2" matches the test case with the exact resource
     *       name "t1" or "t2".
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
     *   for more details and examples.
     * @example
     * const [operation] = await client.exportTestCases(request);
     * const [response] = await operation.promise();
     */
    exportTestCases(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                parent: request.parent || '',
            });
        this.initialize();
        return this.innerApiCalls.exportTestCases(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `exportTestCases()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
     *   for more details and examples.
     * @example
     * const decodedOperation = await checkExportTestCasesProgress(name);
     * console.log(decodedOperation.result);
     * console.log(decodedOperation.done);
     * console.log(decodedOperation.metadata);
     */
    async checkExportTestCasesProgress(name) {
        const request = new google_gax_1.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new gax.Operation(operation, this.descriptors.longrunning.exportTestCases, gax.createDefaultBackoffSettings());
        return decodeOperation;
    }
    /**
     * Fetches a list of test cases for a given agent.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The agent to list all pages for.
     *   Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>`.
     * @param {number} request.pageSize
     *   The maximum number of items to return in a single page. By default 20.
     *   Note that when TestCaseView = FULL, the maximum page size allowed is 20.
     *   When TestCaseView = BASIC, the maximum page size allowed is 500.
     * @param {string} request.pageToken
     *   The next_page_token value returned from a previous list request.
     * @param {google.cloud.dialogflow.cx.v3.ListTestCasesRequest.TestCaseView} request.view
     *   Specifies whether response should include all fields or just the metadata.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is Array of [TestCase]{@link google.cloud.dialogflow.cx.v3.TestCase}.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed and will merge results from all the pages into this array.
     *   Note that it can affect your quota.
     *   We recommend using `listTestCasesAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     */
    listTestCases(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                parent: request.parent || '',
            });
        this.initialize();
        return this.innerApiCalls.listTestCases(request, options, callback);
    }
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The agent to list all pages for.
     *   Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>`.
     * @param {number} request.pageSize
     *   The maximum number of items to return in a single page. By default 20.
     *   Note that when TestCaseView = FULL, the maximum page size allowed is 20.
     *   When TestCaseView = BASIC, the maximum page size allowed is 500.
     * @param {string} request.pageToken
     *   The next_page_token value returned from a previous list request.
     * @param {google.cloud.dialogflow.cx.v3.ListTestCasesRequest.TestCaseView} request.view
     *   Specifies whether response should include all fields or just the metadata.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing [TestCase]{@link google.cloud.dialogflow.cx.v3.TestCase} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listTestCasesAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     */
    listTestCasesStream(request, options) {
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                parent: request.parent || '',
            });
        const callSettings = new gax.CallSettings(options);
        this.initialize();
        return this.descriptors.page.listTestCases.createStream(this.innerApiCalls.listTestCases, request, callSettings);
    }
    /**
     * Equivalent to `listTestCases`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The agent to list all pages for.
     *   Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>`.
     * @param {number} request.pageSize
     *   The maximum number of items to return in a single page. By default 20.
     *   Note that when TestCaseView = FULL, the maximum page size allowed is 20.
     *   When TestCaseView = BASIC, the maximum page size allowed is 500.
     * @param {string} request.pageToken
     *   The next_page_token value returned from a previous list request.
     * @param {google.cloud.dialogflow.cx.v3.ListTestCasesRequest.TestCaseView} request.view
     *   Specifies whether response should include all fields or just the metadata.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
     *   When you iterate the returned iterable, each element will be an object representing
     *   [TestCase]{@link google.cloud.dialogflow.cx.v3.TestCase}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     * @example
     * const iterable = client.listTestCasesAsync(request);
     * for await (const response of iterable) {
     *   // process response
     * }
     */
    listTestCasesAsync(request, options) {
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                parent: request.parent || '',
            });
        options = options || {};
        const callSettings = new gax.CallSettings(options);
        this.initialize();
        return this.descriptors.page.listTestCases.asyncIterate(this.innerApiCalls['listTestCases'], request, callSettings);
    }
    /**
     * Fetches a list of results for a given test case.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The test case to list results for.
     *   Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/
     *   testCases/<TestCase ID>`. Specify a `-` as a wildcard for TestCase ID to
     *   list results across multiple test cases.
     * @param {number} request.pageSize
     *   The maximum number of items to return in a single page. By default 100 and
     *   at most 1000.
     * @param {string} request.pageToken
     *   The next_page_token value returned from a previous list request.
     * @param {string} request.filter
     *   The filter expression used to filter test case results. See
     *   [API Filtering](https://aip.dev/160).
     *
     *   The expression is case insensitive. Only 'AND' is supported for logical
     *   operators. The supported syntax is listed below in detail:
     *
     *     <field> <operator> <value> [AND <field> <operator> <value>] ...
     *     [AND latest]
     *
     *   The supported fields and operators are:
     *   field                 operator
     *   `environment`         `=`, `IN`  (Use value `draft` for draft environment)
     *   `test_time`           `>`, `<`
     *
     *   `latest` only returns the latest test result in all results for each test
     *   case.
     *
     *   Examples:
     *   *   "environment=draft AND latest" matches the latest test result for each
     *       test case in the draft environment.
     *   *   "environment IN (e1,e2)" matches any test case results with an
     *       environment resource name of either "e1" or "e2".
     *   *   "test_time > 1602540713" matches any test case results with test time
     *       later than a unix timestamp in seconds 1602540713.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is Array of [TestCaseResult]{@link google.cloud.dialogflow.cx.v3.TestCaseResult}.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed and will merge results from all the pages into this array.
     *   Note that it can affect your quota.
     *   We recommend using `listTestCaseResultsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     */
    listTestCaseResults(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                parent: request.parent || '',
            });
        this.initialize();
        return this.innerApiCalls.listTestCaseResults(request, options, callback);
    }
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The test case to list results for.
     *   Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/
     *   testCases/<TestCase ID>`. Specify a `-` as a wildcard for TestCase ID to
     *   list results across multiple test cases.
     * @param {number} request.pageSize
     *   The maximum number of items to return in a single page. By default 100 and
     *   at most 1000.
     * @param {string} request.pageToken
     *   The next_page_token value returned from a previous list request.
     * @param {string} request.filter
     *   The filter expression used to filter test case results. See
     *   [API Filtering](https://aip.dev/160).
     *
     *   The expression is case insensitive. Only 'AND' is supported for logical
     *   operators. The supported syntax is listed below in detail:
     *
     *     <field> <operator> <value> [AND <field> <operator> <value>] ...
     *     [AND latest]
     *
     *   The supported fields and operators are:
     *   field                 operator
     *   `environment`         `=`, `IN`  (Use value `draft` for draft environment)
     *   `test_time`           `>`, `<`
     *
     *   `latest` only returns the latest test result in all results for each test
     *   case.
     *
     *   Examples:
     *   *   "environment=draft AND latest" matches the latest test result for each
     *       test case in the draft environment.
     *   *   "environment IN (e1,e2)" matches any test case results with an
     *       environment resource name of either "e1" or "e2".
     *   *   "test_time > 1602540713" matches any test case results with test time
     *       later than a unix timestamp in seconds 1602540713.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing [TestCaseResult]{@link google.cloud.dialogflow.cx.v3.TestCaseResult} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listTestCaseResultsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     */
    listTestCaseResultsStream(request, options) {
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                parent: request.parent || '',
            });
        const callSettings = new gax.CallSettings(options);
        this.initialize();
        return this.descriptors.page.listTestCaseResults.createStream(this.innerApiCalls.listTestCaseResults, request, callSettings);
    }
    /**
     * Equivalent to `listTestCaseResults`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The test case to list results for.
     *   Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/
     *   testCases/<TestCase ID>`. Specify a `-` as a wildcard for TestCase ID to
     *   list results across multiple test cases.
     * @param {number} request.pageSize
     *   The maximum number of items to return in a single page. By default 100 and
     *   at most 1000.
     * @param {string} request.pageToken
     *   The next_page_token value returned from a previous list request.
     * @param {string} request.filter
     *   The filter expression used to filter test case results. See
     *   [API Filtering](https://aip.dev/160).
     *
     *   The expression is case insensitive. Only 'AND' is supported for logical
     *   operators. The supported syntax is listed below in detail:
     *
     *     <field> <operator> <value> [AND <field> <operator> <value>] ...
     *     [AND latest]
     *
     *   The supported fields and operators are:
     *   field                 operator
     *   `environment`         `=`, `IN`  (Use value `draft` for draft environment)
     *   `test_time`           `>`, `<`
     *
     *   `latest` only returns the latest test result in all results for each test
     *   case.
     *
     *   Examples:
     *   *   "environment=draft AND latest" matches the latest test result for each
     *       test case in the draft environment.
     *   *   "environment IN (e1,e2)" matches any test case results with an
     *       environment resource name of either "e1" or "e2".
     *   *   "test_time > 1602540713" matches any test case results with test time
     *       later than a unix timestamp in seconds 1602540713.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
     *   When you iterate the returned iterable, each element will be an object representing
     *   [TestCaseResult]{@link google.cloud.dialogflow.cx.v3.TestCaseResult}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     * @example
     * const iterable = client.listTestCaseResultsAsync(request);
     * for await (const response of iterable) {
     *   // process response
     * }
     */
    listTestCaseResultsAsync(request, options) {
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                parent: request.parent || '',
            });
        options = options || {};
        const callSettings = new gax.CallSettings(options);
        this.initialize();
        return this.descriptors.page.listTestCaseResults.asyncIterate(this.innerApiCalls['listTestCaseResults'], request, callSettings);
    }
    // --------------------
    // -- Path templates --
    // --------------------
    /**
     * Return a fully-qualified agent resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} agent
     * @returns {string} Resource name string.
     */
    agentPath(project, location, agent) {
        return this.pathTemplates.agentPathTemplate.render({
            project: project,
            location: location,
            agent: agent,
        });
    }
    /**
     * Parse the project from Agent resource.
     *
     * @param {string} agentName
     *   A fully-qualified path representing Agent resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromAgentName(agentName) {
        return this.pathTemplates.agentPathTemplate.match(agentName).project;
    }
    /**
     * Parse the location from Agent resource.
     *
     * @param {string} agentName
     *   A fully-qualified path representing Agent resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromAgentName(agentName) {
        return this.pathTemplates.agentPathTemplate.match(agentName).location;
    }
    /**
     * Parse the agent from Agent resource.
     *
     * @param {string} agentName
     *   A fully-qualified path representing Agent resource.
     * @returns {string} A string representing the agent.
     */
    matchAgentFromAgentName(agentName) {
        return this.pathTemplates.agentPathTemplate.match(agentName).agent;
    }
    /**
     * Return a fully-qualified agentValidationResult resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} agent
     * @returns {string} Resource name string.
     */
    agentValidationResultPath(project, location, agent) {
        return this.pathTemplates.agentValidationResultPathTemplate.render({
            project: project,
            location: location,
            agent: agent,
        });
    }
    /**
     * Parse the project from AgentValidationResult resource.
     *
     * @param {string} agentValidationResultName
     *   A fully-qualified path representing AgentValidationResult resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromAgentValidationResultName(agentValidationResultName) {
        return this.pathTemplates.agentValidationResultPathTemplate.match(agentValidationResultName).project;
    }
    /**
     * Parse the location from AgentValidationResult resource.
     *
     * @param {string} agentValidationResultName
     *   A fully-qualified path representing AgentValidationResult resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromAgentValidationResultName(agentValidationResultName) {
        return this.pathTemplates.agentValidationResultPathTemplate.match(agentValidationResultName).location;
    }
    /**
     * Parse the agent from AgentValidationResult resource.
     *
     * @param {string} agentValidationResultName
     *   A fully-qualified path representing AgentValidationResult resource.
     * @returns {string} A string representing the agent.
     */
    matchAgentFromAgentValidationResultName(agentValidationResultName) {
        return this.pathTemplates.agentValidationResultPathTemplate.match(agentValidationResultName).agent;
    }
    /**
     * Return a fully-qualified entityType resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} agent
     * @param {string} entity_type
     * @returns {string} Resource name string.
     */
    entityTypePath(project, location, agent, entityType) {
        return this.pathTemplates.entityTypePathTemplate.render({
            project: project,
            location: location,
            agent: agent,
            entity_type: entityType,
        });
    }
    /**
     * Parse the project from EntityType resource.
     *
     * @param {string} entityTypeName
     *   A fully-qualified path representing EntityType resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromEntityTypeName(entityTypeName) {
        return this.pathTemplates.entityTypePathTemplate.match(entityTypeName)
            .project;
    }
    /**
     * Parse the location from EntityType resource.
     *
     * @param {string} entityTypeName
     *   A fully-qualified path representing EntityType resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromEntityTypeName(entityTypeName) {
        return this.pathTemplates.entityTypePathTemplate.match(entityTypeName)
            .location;
    }
    /**
     * Parse the agent from EntityType resource.
     *
     * @param {string} entityTypeName
     *   A fully-qualified path representing EntityType resource.
     * @returns {string} A string representing the agent.
     */
    matchAgentFromEntityTypeName(entityTypeName) {
        return this.pathTemplates.entityTypePathTemplate.match(entityTypeName)
            .agent;
    }
    /**
     * Parse the entity_type from EntityType resource.
     *
     * @param {string} entityTypeName
     *   A fully-qualified path representing EntityType resource.
     * @returns {string} A string representing the entity_type.
     */
    matchEntityTypeFromEntityTypeName(entityTypeName) {
        return this.pathTemplates.entityTypePathTemplate.match(entityTypeName)
            .entity_type;
    }
    /**
     * Return a fully-qualified environment resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} agent
     * @param {string} environment
     * @returns {string} Resource name string.
     */
    environmentPath(project, location, agent, environment) {
        return this.pathTemplates.environmentPathTemplate.render({
            project: project,
            location: location,
            agent: agent,
            environment: environment,
        });
    }
    /**
     * Parse the project from Environment resource.
     *
     * @param {string} environmentName
     *   A fully-qualified path representing Environment resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromEnvironmentName(environmentName) {
        return this.pathTemplates.environmentPathTemplate.match(environmentName)
            .project;
    }
    /**
     * Parse the location from Environment resource.
     *
     * @param {string} environmentName
     *   A fully-qualified path representing Environment resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromEnvironmentName(environmentName) {
        return this.pathTemplates.environmentPathTemplate.match(environmentName)
            .location;
    }
    /**
     * Parse the agent from Environment resource.
     *
     * @param {string} environmentName
     *   A fully-qualified path representing Environment resource.
     * @returns {string} A string representing the agent.
     */
    matchAgentFromEnvironmentName(environmentName) {
        return this.pathTemplates.environmentPathTemplate.match(environmentName)
            .agent;
    }
    /**
     * Parse the environment from Environment resource.
     *
     * @param {string} environmentName
     *   A fully-qualified path representing Environment resource.
     * @returns {string} A string representing the environment.
     */
    matchEnvironmentFromEnvironmentName(environmentName) {
        return this.pathTemplates.environmentPathTemplate.match(environmentName)
            .environment;
    }
    /**
     * Return a fully-qualified experiment resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} agent
     * @param {string} environment
     * @param {string} experiment
     * @returns {string} Resource name string.
     */
    experimentPath(project, location, agent, environment, experiment) {
        return this.pathTemplates.experimentPathTemplate.render({
            project: project,
            location: location,
            agent: agent,
            environment: environment,
            experiment: experiment,
        });
    }
    /**
     * Parse the project from Experiment resource.
     *
     * @param {string} experimentName
     *   A fully-qualified path representing Experiment resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromExperimentName(experimentName) {
        return this.pathTemplates.experimentPathTemplate.match(experimentName)
            .project;
    }
    /**
     * Parse the location from Experiment resource.
     *
     * @param {string} experimentName
     *   A fully-qualified path representing Experiment resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromExperimentName(experimentName) {
        return this.pathTemplates.experimentPathTemplate.match(experimentName)
            .location;
    }
    /**
     * Parse the agent from Experiment resource.
     *
     * @param {string} experimentName
     *   A fully-qualified path representing Experiment resource.
     * @returns {string} A string representing the agent.
     */
    matchAgentFromExperimentName(experimentName) {
        return this.pathTemplates.experimentPathTemplate.match(experimentName)
            .agent;
    }
    /**
     * Parse the environment from Experiment resource.
     *
     * @param {string} experimentName
     *   A fully-qualified path representing Experiment resource.
     * @returns {string} A string representing the environment.
     */
    matchEnvironmentFromExperimentName(experimentName) {
        return this.pathTemplates.experimentPathTemplate.match(experimentName)
            .environment;
    }
    /**
     * Parse the experiment from Experiment resource.
     *
     * @param {string} experimentName
     *   A fully-qualified path representing Experiment resource.
     * @returns {string} A string representing the experiment.
     */
    matchExperimentFromExperimentName(experimentName) {
        return this.pathTemplates.experimentPathTemplate.match(experimentName)
            .experiment;
    }
    /**
     * Return a fully-qualified flow resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} agent
     * @param {string} flow
     * @returns {string} Resource name string.
     */
    flowPath(project, location, agent, flow) {
        return this.pathTemplates.flowPathTemplate.render({
            project: project,
            location: location,
            agent: agent,
            flow: flow,
        });
    }
    /**
     * Parse the project from Flow resource.
     *
     * @param {string} flowName
     *   A fully-qualified path representing Flow resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromFlowName(flowName) {
        return this.pathTemplates.flowPathTemplate.match(flowName).project;
    }
    /**
     * Parse the location from Flow resource.
     *
     * @param {string} flowName
     *   A fully-qualified path representing Flow resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromFlowName(flowName) {
        return this.pathTemplates.flowPathTemplate.match(flowName).location;
    }
    /**
     * Parse the agent from Flow resource.
     *
     * @param {string} flowName
     *   A fully-qualified path representing Flow resource.
     * @returns {string} A string representing the agent.
     */
    matchAgentFromFlowName(flowName) {
        return this.pathTemplates.flowPathTemplate.match(flowName).agent;
    }
    /**
     * Parse the flow from Flow resource.
     *
     * @param {string} flowName
     *   A fully-qualified path representing Flow resource.
     * @returns {string} A string representing the flow.
     */
    matchFlowFromFlowName(flowName) {
        return this.pathTemplates.flowPathTemplate.match(flowName).flow;
    }
    /**
     * Return a fully-qualified flowValidationResult resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} agent
     * @param {string} flow
     * @returns {string} Resource name string.
     */
    flowValidationResultPath(project, location, agent, flow) {
        return this.pathTemplates.flowValidationResultPathTemplate.render({
            project: project,
            location: location,
            agent: agent,
            flow: flow,
        });
    }
    /**
     * Parse the project from FlowValidationResult resource.
     *
     * @param {string} flowValidationResultName
     *   A fully-qualified path representing FlowValidationResult resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromFlowValidationResultName(flowValidationResultName) {
        return this.pathTemplates.flowValidationResultPathTemplate.match(flowValidationResultName).project;
    }
    /**
     * Parse the location from FlowValidationResult resource.
     *
     * @param {string} flowValidationResultName
     *   A fully-qualified path representing FlowValidationResult resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromFlowValidationResultName(flowValidationResultName) {
        return this.pathTemplates.flowValidationResultPathTemplate.match(flowValidationResultName).location;
    }
    /**
     * Parse the agent from FlowValidationResult resource.
     *
     * @param {string} flowValidationResultName
     *   A fully-qualified path representing FlowValidationResult resource.
     * @returns {string} A string representing the agent.
     */
    matchAgentFromFlowValidationResultName(flowValidationResultName) {
        return this.pathTemplates.flowValidationResultPathTemplate.match(flowValidationResultName).agent;
    }
    /**
     * Parse the flow from FlowValidationResult resource.
     *
     * @param {string} flowValidationResultName
     *   A fully-qualified path representing FlowValidationResult resource.
     * @returns {string} A string representing the flow.
     */
    matchFlowFromFlowValidationResultName(flowValidationResultName) {
        return this.pathTemplates.flowValidationResultPathTemplate.match(flowValidationResultName).flow;
    }
    /**
     * Return a fully-qualified intent resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} agent
     * @param {string} intent
     * @returns {string} Resource name string.
     */
    intentPath(project, location, agent, intent) {
        return this.pathTemplates.intentPathTemplate.render({
            project: project,
            location: location,
            agent: agent,
            intent: intent,
        });
    }
    /**
     * Parse the project from Intent resource.
     *
     * @param {string} intentName
     *   A fully-qualified path representing Intent resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromIntentName(intentName) {
        return this.pathTemplates.intentPathTemplate.match(intentName).project;
    }
    /**
     * Parse the location from Intent resource.
     *
     * @param {string} intentName
     *   A fully-qualified path representing Intent resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromIntentName(intentName) {
        return this.pathTemplates.intentPathTemplate.match(intentName).location;
    }
    /**
     * Parse the agent from Intent resource.
     *
     * @param {string} intentName
     *   A fully-qualified path representing Intent resource.
     * @returns {string} A string representing the agent.
     */
    matchAgentFromIntentName(intentName) {
        return this.pathTemplates.intentPathTemplate.match(intentName).agent;
    }
    /**
     * Parse the intent from Intent resource.
     *
     * @param {string} intentName
     *   A fully-qualified path representing Intent resource.
     * @returns {string} A string representing the intent.
     */
    matchIntentFromIntentName(intentName) {
        return this.pathTemplates.intentPathTemplate.match(intentName).intent;
    }
    /**
     * Return a fully-qualified location resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @returns {string} Resource name string.
     */
    locationPath(project, location) {
        return this.pathTemplates.locationPathTemplate.render({
            project: project,
            location: location,
        });
    }
    /**
     * Parse the project from Location resource.
     *
     * @param {string} locationName
     *   A fully-qualified path representing Location resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromLocationName(locationName) {
        return this.pathTemplates.locationPathTemplate.match(locationName).project;
    }
    /**
     * Parse the location from Location resource.
     *
     * @param {string} locationName
     *   A fully-qualified path representing Location resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromLocationName(locationName) {
        return this.pathTemplates.locationPathTemplate.match(locationName).location;
    }
    /**
     * Return a fully-qualified page resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} agent
     * @param {string} flow
     * @param {string} page
     * @returns {string} Resource name string.
     */
    pagePath(project, location, agent, flow, page) {
        return this.pathTemplates.pagePathTemplate.render({
            project: project,
            location: location,
            agent: agent,
            flow: flow,
            page: page,
        });
    }
    /**
     * Parse the project from Page resource.
     *
     * @param {string} pageName
     *   A fully-qualified path representing Page resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromPageName(pageName) {
        return this.pathTemplates.pagePathTemplate.match(pageName).project;
    }
    /**
     * Parse the location from Page resource.
     *
     * @param {string} pageName
     *   A fully-qualified path representing Page resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromPageName(pageName) {
        return this.pathTemplates.pagePathTemplate.match(pageName).location;
    }
    /**
     * Parse the agent from Page resource.
     *
     * @param {string} pageName
     *   A fully-qualified path representing Page resource.
     * @returns {string} A string representing the agent.
     */
    matchAgentFromPageName(pageName) {
        return this.pathTemplates.pagePathTemplate.match(pageName).agent;
    }
    /**
     * Parse the flow from Page resource.
     *
     * @param {string} pageName
     *   A fully-qualified path representing Page resource.
     * @returns {string} A string representing the flow.
     */
    matchFlowFromPageName(pageName) {
        return this.pathTemplates.pagePathTemplate.match(pageName).flow;
    }
    /**
     * Parse the page from Page resource.
     *
     * @param {string} pageName
     *   A fully-qualified path representing Page resource.
     * @returns {string} A string representing the page.
     */
    matchPageFromPageName(pageName) {
        return this.pathTemplates.pagePathTemplate.match(pageName).page;
    }
    /**
     * Return a fully-qualified project resource name string.
     *
     * @param {string} project
     * @returns {string} Resource name string.
     */
    projectPath(project) {
        return this.pathTemplates.projectPathTemplate.render({
            project: project,
        });
    }
    /**
     * Parse the project from Project resource.
     *
     * @param {string} projectName
     *   A fully-qualified path representing Project resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectName(projectName) {
        return this.pathTemplates.projectPathTemplate.match(projectName).project;
    }
    /**
     * Return a fully-qualified projectLocationAgentEnvironmentSessionEntityType resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} agent
     * @param {string} environment
     * @param {string} session
     * @param {string} entity_type
     * @returns {string} Resource name string.
     */
    projectLocationAgentEnvironmentSessionEntityTypePath(project, location, agent, environment, session, entityType) {
        return this.pathTemplates.projectLocationAgentEnvironmentSessionEntityTypePathTemplate.render({
            project: project,
            location: location,
            agent: agent,
            environment: environment,
            session: session,
            entity_type: entityType,
        });
    }
    /**
     * Parse the project from ProjectLocationAgentEnvironmentSessionEntityType resource.
     *
     * @param {string} projectLocationAgentEnvironmentSessionEntityTypeName
     *   A fully-qualified path representing project_location_agent_environment_session_entity_type resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectLocationAgentEnvironmentSessionEntityTypeName(projectLocationAgentEnvironmentSessionEntityTypeName) {
        return this.pathTemplates.projectLocationAgentEnvironmentSessionEntityTypePathTemplate.match(projectLocationAgentEnvironmentSessionEntityTypeName).project;
    }
    /**
     * Parse the location from ProjectLocationAgentEnvironmentSessionEntityType resource.
     *
     * @param {string} projectLocationAgentEnvironmentSessionEntityTypeName
     *   A fully-qualified path representing project_location_agent_environment_session_entity_type resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromProjectLocationAgentEnvironmentSessionEntityTypeName(projectLocationAgentEnvironmentSessionEntityTypeName) {
        return this.pathTemplates.projectLocationAgentEnvironmentSessionEntityTypePathTemplate.match(projectLocationAgentEnvironmentSessionEntityTypeName).location;
    }
    /**
     * Parse the agent from ProjectLocationAgentEnvironmentSessionEntityType resource.
     *
     * @param {string} projectLocationAgentEnvironmentSessionEntityTypeName
     *   A fully-qualified path representing project_location_agent_environment_session_entity_type resource.
     * @returns {string} A string representing the agent.
     */
    matchAgentFromProjectLocationAgentEnvironmentSessionEntityTypeName(projectLocationAgentEnvironmentSessionEntityTypeName) {
        return this.pathTemplates.projectLocationAgentEnvironmentSessionEntityTypePathTemplate.match(projectLocationAgentEnvironmentSessionEntityTypeName).agent;
    }
    /**
     * Parse the environment from ProjectLocationAgentEnvironmentSessionEntityType resource.
     *
     * @param {string} projectLocationAgentEnvironmentSessionEntityTypeName
     *   A fully-qualified path representing project_location_agent_environment_session_entity_type resource.
     * @returns {string} A string representing the environment.
     */
    matchEnvironmentFromProjectLocationAgentEnvironmentSessionEntityTypeName(projectLocationAgentEnvironmentSessionEntityTypeName) {
        return this.pathTemplates.projectLocationAgentEnvironmentSessionEntityTypePathTemplate.match(projectLocationAgentEnvironmentSessionEntityTypeName).environment;
    }
    /**
     * Parse the session from ProjectLocationAgentEnvironmentSessionEntityType resource.
     *
     * @param {string} projectLocationAgentEnvironmentSessionEntityTypeName
     *   A fully-qualified path representing project_location_agent_environment_session_entity_type resource.
     * @returns {string} A string representing the session.
     */
    matchSessionFromProjectLocationAgentEnvironmentSessionEntityTypeName(projectLocationAgentEnvironmentSessionEntityTypeName) {
        return this.pathTemplates.projectLocationAgentEnvironmentSessionEntityTypePathTemplate.match(projectLocationAgentEnvironmentSessionEntityTypeName).session;
    }
    /**
     * Parse the entity_type from ProjectLocationAgentEnvironmentSessionEntityType resource.
     *
     * @param {string} projectLocationAgentEnvironmentSessionEntityTypeName
     *   A fully-qualified path representing project_location_agent_environment_session_entity_type resource.
     * @returns {string} A string representing the entity_type.
     */
    matchEntityTypeFromProjectLocationAgentEnvironmentSessionEntityTypeName(projectLocationAgentEnvironmentSessionEntityTypeName) {
        return this.pathTemplates.projectLocationAgentEnvironmentSessionEntityTypePathTemplate.match(projectLocationAgentEnvironmentSessionEntityTypeName).entity_type;
    }
    /**
     * Return a fully-qualified projectLocationAgentSessionEntityType resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} agent
     * @param {string} session
     * @param {string} entity_type
     * @returns {string} Resource name string.
     */
    projectLocationAgentSessionEntityTypePath(project, location, agent, session, entityType) {
        return this.pathTemplates.projectLocationAgentSessionEntityTypePathTemplate.render({
            project: project,
            location: location,
            agent: agent,
            session: session,
            entity_type: entityType,
        });
    }
    /**
     * Parse the project from ProjectLocationAgentSessionEntityType resource.
     *
     * @param {string} projectLocationAgentSessionEntityTypeName
     *   A fully-qualified path representing project_location_agent_session_entity_type resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectLocationAgentSessionEntityTypeName(projectLocationAgentSessionEntityTypeName) {
        return this.pathTemplates.projectLocationAgentSessionEntityTypePathTemplate.match(projectLocationAgentSessionEntityTypeName).project;
    }
    /**
     * Parse the location from ProjectLocationAgentSessionEntityType resource.
     *
     * @param {string} projectLocationAgentSessionEntityTypeName
     *   A fully-qualified path representing project_location_agent_session_entity_type resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromProjectLocationAgentSessionEntityTypeName(projectLocationAgentSessionEntityTypeName) {
        return this.pathTemplates.projectLocationAgentSessionEntityTypePathTemplate.match(projectLocationAgentSessionEntityTypeName).location;
    }
    /**
     * Parse the agent from ProjectLocationAgentSessionEntityType resource.
     *
     * @param {string} projectLocationAgentSessionEntityTypeName
     *   A fully-qualified path representing project_location_agent_session_entity_type resource.
     * @returns {string} A string representing the agent.
     */
    matchAgentFromProjectLocationAgentSessionEntityTypeName(projectLocationAgentSessionEntityTypeName) {
        return this.pathTemplates.projectLocationAgentSessionEntityTypePathTemplate.match(projectLocationAgentSessionEntityTypeName).agent;
    }
    /**
     * Parse the session from ProjectLocationAgentSessionEntityType resource.
     *
     * @param {string} projectLocationAgentSessionEntityTypeName
     *   A fully-qualified path representing project_location_agent_session_entity_type resource.
     * @returns {string} A string representing the session.
     */
    matchSessionFromProjectLocationAgentSessionEntityTypeName(projectLocationAgentSessionEntityTypeName) {
        return this.pathTemplates.projectLocationAgentSessionEntityTypePathTemplate.match(projectLocationAgentSessionEntityTypeName).session;
    }
    /**
     * Parse the entity_type from ProjectLocationAgentSessionEntityType resource.
     *
     * @param {string} projectLocationAgentSessionEntityTypeName
     *   A fully-qualified path representing project_location_agent_session_entity_type resource.
     * @returns {string} A string representing the entity_type.
     */
    matchEntityTypeFromProjectLocationAgentSessionEntityTypeName(projectLocationAgentSessionEntityTypeName) {
        return this.pathTemplates.projectLocationAgentSessionEntityTypePathTemplate.match(projectLocationAgentSessionEntityTypeName).entity_type;
    }
    /**
     * Return a fully-qualified securitySettings resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} security_settings
     * @returns {string} Resource name string.
     */
    securitySettingsPath(project, location, securitySettings) {
        return this.pathTemplates.securitySettingsPathTemplate.render({
            project: project,
            location: location,
            security_settings: securitySettings,
        });
    }
    /**
     * Parse the project from SecuritySettings resource.
     *
     * @param {string} securitySettingsName
     *   A fully-qualified path representing SecuritySettings resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromSecuritySettingsName(securitySettingsName) {
        return this.pathTemplates.securitySettingsPathTemplate.match(securitySettingsName).project;
    }
    /**
     * Parse the location from SecuritySettings resource.
     *
     * @param {string} securitySettingsName
     *   A fully-qualified path representing SecuritySettings resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromSecuritySettingsName(securitySettingsName) {
        return this.pathTemplates.securitySettingsPathTemplate.match(securitySettingsName).location;
    }
    /**
     * Parse the security_settings from SecuritySettings resource.
     *
     * @param {string} securitySettingsName
     *   A fully-qualified path representing SecuritySettings resource.
     * @returns {string} A string representing the security_settings.
     */
    matchSecuritySettingsFromSecuritySettingsName(securitySettingsName) {
        return this.pathTemplates.securitySettingsPathTemplate.match(securitySettingsName).security_settings;
    }
    /**
     * Return a fully-qualified testCase resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} agent
     * @param {string} test_case
     * @returns {string} Resource name string.
     */
    testCasePath(project, location, agent, testCase) {
        return this.pathTemplates.testCasePathTemplate.render({
            project: project,
            location: location,
            agent: agent,
            test_case: testCase,
        });
    }
    /**
     * Parse the project from TestCase resource.
     *
     * @param {string} testCaseName
     *   A fully-qualified path representing TestCase resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromTestCaseName(testCaseName) {
        return this.pathTemplates.testCasePathTemplate.match(testCaseName).project;
    }
    /**
     * Parse the location from TestCase resource.
     *
     * @param {string} testCaseName
     *   A fully-qualified path representing TestCase resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromTestCaseName(testCaseName) {
        return this.pathTemplates.testCasePathTemplate.match(testCaseName).location;
    }
    /**
     * Parse the agent from TestCase resource.
     *
     * @param {string} testCaseName
     *   A fully-qualified path representing TestCase resource.
     * @returns {string} A string representing the agent.
     */
    matchAgentFromTestCaseName(testCaseName) {
        return this.pathTemplates.testCasePathTemplate.match(testCaseName).agent;
    }
    /**
     * Parse the test_case from TestCase resource.
     *
     * @param {string} testCaseName
     *   A fully-qualified path representing TestCase resource.
     * @returns {string} A string representing the test_case.
     */
    matchTestCaseFromTestCaseName(testCaseName) {
        return this.pathTemplates.testCasePathTemplate.match(testCaseName)
            .test_case;
    }
    /**
     * Return a fully-qualified testCaseResult resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} agent
     * @param {string} test_case
     * @param {string} result
     * @returns {string} Resource name string.
     */
    testCaseResultPath(project, location, agent, testCase, result) {
        return this.pathTemplates.testCaseResultPathTemplate.render({
            project: project,
            location: location,
            agent: agent,
            test_case: testCase,
            result: result,
        });
    }
    /**
     * Parse the project from TestCaseResult resource.
     *
     * @param {string} testCaseResultName
     *   A fully-qualified path representing TestCaseResult resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromTestCaseResultName(testCaseResultName) {
        return this.pathTemplates.testCaseResultPathTemplate.match(testCaseResultName).project;
    }
    /**
     * Parse the location from TestCaseResult resource.
     *
     * @param {string} testCaseResultName
     *   A fully-qualified path representing TestCaseResult resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromTestCaseResultName(testCaseResultName) {
        return this.pathTemplates.testCaseResultPathTemplate.match(testCaseResultName).location;
    }
    /**
     * Parse the agent from TestCaseResult resource.
     *
     * @param {string} testCaseResultName
     *   A fully-qualified path representing TestCaseResult resource.
     * @returns {string} A string representing the agent.
     */
    matchAgentFromTestCaseResultName(testCaseResultName) {
        return this.pathTemplates.testCaseResultPathTemplate.match(testCaseResultName).agent;
    }
    /**
     * Parse the test_case from TestCaseResult resource.
     *
     * @param {string} testCaseResultName
     *   A fully-qualified path representing TestCaseResult resource.
     * @returns {string} A string representing the test_case.
     */
    matchTestCaseFromTestCaseResultName(testCaseResultName) {
        return this.pathTemplates.testCaseResultPathTemplate.match(testCaseResultName).test_case;
    }
    /**
     * Parse the result from TestCaseResult resource.
     *
     * @param {string} testCaseResultName
     *   A fully-qualified path representing TestCaseResult resource.
     * @returns {string} A string representing the result.
     */
    matchResultFromTestCaseResultName(testCaseResultName) {
        return this.pathTemplates.testCaseResultPathTemplate.match(testCaseResultName).result;
    }
    /**
     * Return a fully-qualified transitionRouteGroup resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} agent
     * @param {string} flow
     * @param {string} transition_route_group
     * @returns {string} Resource name string.
     */
    transitionRouteGroupPath(project, location, agent, flow, transitionRouteGroup) {
        return this.pathTemplates.transitionRouteGroupPathTemplate.render({
            project: project,
            location: location,
            agent: agent,
            flow: flow,
            transition_route_group: transitionRouteGroup,
        });
    }
    /**
     * Parse the project from TransitionRouteGroup resource.
     *
     * @param {string} transitionRouteGroupName
     *   A fully-qualified path representing TransitionRouteGroup resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromTransitionRouteGroupName(transitionRouteGroupName) {
        return this.pathTemplates.transitionRouteGroupPathTemplate.match(transitionRouteGroupName).project;
    }
    /**
     * Parse the location from TransitionRouteGroup resource.
     *
     * @param {string} transitionRouteGroupName
     *   A fully-qualified path representing TransitionRouteGroup resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromTransitionRouteGroupName(transitionRouteGroupName) {
        return this.pathTemplates.transitionRouteGroupPathTemplate.match(transitionRouteGroupName).location;
    }
    /**
     * Parse the agent from TransitionRouteGroup resource.
     *
     * @param {string} transitionRouteGroupName
     *   A fully-qualified path representing TransitionRouteGroup resource.
     * @returns {string} A string representing the agent.
     */
    matchAgentFromTransitionRouteGroupName(transitionRouteGroupName) {
        return this.pathTemplates.transitionRouteGroupPathTemplate.match(transitionRouteGroupName).agent;
    }
    /**
     * Parse the flow from TransitionRouteGroup resource.
     *
     * @param {string} transitionRouteGroupName
     *   A fully-qualified path representing TransitionRouteGroup resource.
     * @returns {string} A string representing the flow.
     */
    matchFlowFromTransitionRouteGroupName(transitionRouteGroupName) {
        return this.pathTemplates.transitionRouteGroupPathTemplate.match(transitionRouteGroupName).flow;
    }
    /**
     * Parse the transition_route_group from TransitionRouteGroup resource.
     *
     * @param {string} transitionRouteGroupName
     *   A fully-qualified path representing TransitionRouteGroup resource.
     * @returns {string} A string representing the transition_route_group.
     */
    matchTransitionRouteGroupFromTransitionRouteGroupName(transitionRouteGroupName) {
        return this.pathTemplates.transitionRouteGroupPathTemplate.match(transitionRouteGroupName).transition_route_group;
    }
    /**
     * Return a fully-qualified version resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} agent
     * @param {string} flow
     * @param {string} version
     * @returns {string} Resource name string.
     */
    versionPath(project, location, agent, flow, version) {
        return this.pathTemplates.versionPathTemplate.render({
            project: project,
            location: location,
            agent: agent,
            flow: flow,
            version: version,
        });
    }
    /**
     * Parse the project from Version resource.
     *
     * @param {string} versionName
     *   A fully-qualified path representing Version resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromVersionName(versionName) {
        return this.pathTemplates.versionPathTemplate.match(versionName).project;
    }
    /**
     * Parse the location from Version resource.
     *
     * @param {string} versionName
     *   A fully-qualified path representing Version resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromVersionName(versionName) {
        return this.pathTemplates.versionPathTemplate.match(versionName).location;
    }
    /**
     * Parse the agent from Version resource.
     *
     * @param {string} versionName
     *   A fully-qualified path representing Version resource.
     * @returns {string} A string representing the agent.
     */
    matchAgentFromVersionName(versionName) {
        return this.pathTemplates.versionPathTemplate.match(versionName).agent;
    }
    /**
     * Parse the flow from Version resource.
     *
     * @param {string} versionName
     *   A fully-qualified path representing Version resource.
     * @returns {string} A string representing the flow.
     */
    matchFlowFromVersionName(versionName) {
        return this.pathTemplates.versionPathTemplate.match(versionName).flow;
    }
    /**
     * Parse the version from Version resource.
     *
     * @param {string} versionName
     *   A fully-qualified path representing Version resource.
     * @returns {string} A string representing the version.
     */
    matchVersionFromVersionName(versionName) {
        return this.pathTemplates.versionPathTemplate.match(versionName).version;
    }
    /**
     * Return a fully-qualified webhook resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} agent
     * @param {string} webhook
     * @returns {string} Resource name string.
     */
    webhookPath(project, location, agent, webhook) {
        return this.pathTemplates.webhookPathTemplate.render({
            project: project,
            location: location,
            agent: agent,
            webhook: webhook,
        });
    }
    /**
     * Parse the project from Webhook resource.
     *
     * @param {string} webhookName
     *   A fully-qualified path representing Webhook resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromWebhookName(webhookName) {
        return this.pathTemplates.webhookPathTemplate.match(webhookName).project;
    }
    /**
     * Parse the location from Webhook resource.
     *
     * @param {string} webhookName
     *   A fully-qualified path representing Webhook resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromWebhookName(webhookName) {
        return this.pathTemplates.webhookPathTemplate.match(webhookName).location;
    }
    /**
     * Parse the agent from Webhook resource.
     *
     * @param {string} webhookName
     *   A fully-qualified path representing Webhook resource.
     * @returns {string} A string representing the agent.
     */
    matchAgentFromWebhookName(webhookName) {
        return this.pathTemplates.webhookPathTemplate.match(webhookName).agent;
    }
    /**
     * Parse the webhook from Webhook resource.
     *
     * @param {string} webhookName
     *   A fully-qualified path representing Webhook resource.
     * @returns {string} A string representing the webhook.
     */
    matchWebhookFromWebhookName(webhookName) {
        return this.pathTemplates.webhookPathTemplate.match(webhookName).webhook;
    }
    /**
     * Terminate the gRPC channel and close the client.
     *
     * The client will no longer be usable and all future behavior is undefined.
     * @returns {Promise} A promise that resolves when the client is closed.
     */
    close() {
        this.initialize();
        if (!this._terminated) {
            return this.testCasesStub.then(stub => {
                this._terminated = true;
                stub.close();
            });
        }
        return Promise.resolve();
    }
}
exports.TestCasesClient = TestCasesClient;
//# sourceMappingURL=test_cases_client.js.map