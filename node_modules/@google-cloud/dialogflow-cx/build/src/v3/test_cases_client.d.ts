/// <reference types="node" />
import * as gax from 'google-gax';
import { Callback, CallOptions, Descriptors, ClientOptions, LROperation, PaginationCallback } from 'google-gax';
import { Transform } from 'stream';
import * as protos from '../../protos/protos';
/**
 *  Service for managing {@link google.cloud.dialogflow.cx.v3.TestCase|Test Cases} and
 *  {@link google.cloud.dialogflow.cx.v3.TestCaseResult|Test Case Results}.
 * @class
 * @memberof v3
 */
export declare class TestCasesClient {
    private _terminated;
    private _opts;
    private _gaxModule;
    private _gaxGrpc;
    private _protos;
    private _defaults;
    auth: gax.GoogleAuth;
    descriptors: Descriptors;
    innerApiCalls: {
        [name: string]: Function;
    };
    pathTemplates: {
        [name: string]: gax.PathTemplate;
    };
    operationsClient: gax.OperationsClient;
    testCasesStub?: Promise<{
        [name: string]: Function;
    }>;
    /**
     * Construct an instance of TestCasesClient.
     *
     * @param {object} [options] - The configuration object.
     * The options accepted by the constructor are described in detail
     * in [this document](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#creating-the-client-instance).
     * The common options are:
     * @param {object} [options.credentials] - Credentials object.
     * @param {string} [options.credentials.client_email]
     * @param {string} [options.credentials.private_key]
     * @param {string} [options.email] - Account email address. Required when
     *     using a .pem or .p12 keyFilename.
     * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
     *     .p12 key downloaded from the Google Developers Console. If you provide
     *     a path to a JSON file, the projectId option below is not necessary.
     *     NOTE: .pem and .p12 require you to specify options.email as well.
     * @param {number} [options.port] - The port on which to connect to
     *     the remote host.
     * @param {string} [options.projectId] - The project ID from the Google
     *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
     *     the environment variable GCLOUD_PROJECT for your project ID. If your
     *     app is running in an environment which supports
     *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
     *     your project ID will be detected automatically.
     * @param {string} [options.apiEndpoint] - The domain name of the
     *     API remote host.
     * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
     *     Follows the structure of {@link gapicConfig}.
     * @param {boolean} [options.fallback] - Use HTTP fallback mode.
     *     In fallback mode, a special browser-compatible transport implementation is used
     *     instead of gRPC transport. In browser context (if the `window` object is defined)
     *     the fallback mode is enabled automatically; set `options.fallback` to `false`
     *     if you need to override this behavior.
     */
    constructor(opts?: ClientOptions);
    /**
     * Initialize the client.
     * Performs asynchronous operations (such as authentication) and prepares the client.
     * This function will be called automatically when any class method is called for the
     * first time, but if you need to initialize it before calling an actual method,
     * feel free to call initialize() directly.
     *
     * You can await on this method if you want to make sure the client is initialized.
     *
     * @returns {Promise} A promise that resolves to an authenticated service stub.
     */
    initialize(): Promise<{
        [name: string]: Function;
    }>;
    /**
     * The DNS address for this API service.
     * @returns {string} The DNS address for this service.
     */
    static get servicePath(): string;
    /**
     * The DNS address for this API service - same as servicePath(),
     * exists for compatibility reasons.
     * @returns {string} The DNS address for this service.
     */
    static get apiEndpoint(): string;
    /**
     * The port for this API service.
     * @returns {number} The default port for this service.
     */
    static get port(): number;
    /**
     * The scopes needed to make gRPC calls for every method defined
     * in this service.
     * @returns {string[]} List of default scopes.
     */
    static get scopes(): string[];
    getProjectId(): Promise<string>;
    getProjectId(callback: Callback<string, undefined, undefined>): void;
    batchDeleteTestCases(request: protos.google.cloud.dialogflow.cx.v3.IBatchDeleteTestCasesRequest, options?: CallOptions): Promise<[protos.google.protobuf.IEmpty, (protos.google.cloud.dialogflow.cx.v3.IBatchDeleteTestCasesRequest | undefined), {} | undefined]>;
    batchDeleteTestCases(request: protos.google.cloud.dialogflow.cx.v3.IBatchDeleteTestCasesRequest, options: CallOptions, callback: Callback<protos.google.protobuf.IEmpty, protos.google.cloud.dialogflow.cx.v3.IBatchDeleteTestCasesRequest | null | undefined, {} | null | undefined>): void;
    batchDeleteTestCases(request: protos.google.cloud.dialogflow.cx.v3.IBatchDeleteTestCasesRequest, callback: Callback<protos.google.protobuf.IEmpty, protos.google.cloud.dialogflow.cx.v3.IBatchDeleteTestCasesRequest | null | undefined, {} | null | undefined>): void;
    getTestCase(request: protos.google.cloud.dialogflow.cx.v3.IGetTestCaseRequest, options?: CallOptions): Promise<[protos.google.cloud.dialogflow.cx.v3.ITestCase, protos.google.cloud.dialogflow.cx.v3.IGetTestCaseRequest | undefined, {} | undefined]>;
    getTestCase(request: protos.google.cloud.dialogflow.cx.v3.IGetTestCaseRequest, options: CallOptions, callback: Callback<protos.google.cloud.dialogflow.cx.v3.ITestCase, protos.google.cloud.dialogflow.cx.v3.IGetTestCaseRequest | null | undefined, {} | null | undefined>): void;
    getTestCase(request: protos.google.cloud.dialogflow.cx.v3.IGetTestCaseRequest, callback: Callback<protos.google.cloud.dialogflow.cx.v3.ITestCase, protos.google.cloud.dialogflow.cx.v3.IGetTestCaseRequest | null | undefined, {} | null | undefined>): void;
    createTestCase(request: protos.google.cloud.dialogflow.cx.v3.ICreateTestCaseRequest, options?: CallOptions): Promise<[protos.google.cloud.dialogflow.cx.v3.ITestCase, protos.google.cloud.dialogflow.cx.v3.ICreateTestCaseRequest | undefined, {} | undefined]>;
    createTestCase(request: protos.google.cloud.dialogflow.cx.v3.ICreateTestCaseRequest, options: CallOptions, callback: Callback<protos.google.cloud.dialogflow.cx.v3.ITestCase, protos.google.cloud.dialogflow.cx.v3.ICreateTestCaseRequest | null | undefined, {} | null | undefined>): void;
    createTestCase(request: protos.google.cloud.dialogflow.cx.v3.ICreateTestCaseRequest, callback: Callback<protos.google.cloud.dialogflow.cx.v3.ITestCase, protos.google.cloud.dialogflow.cx.v3.ICreateTestCaseRequest | null | undefined, {} | null | undefined>): void;
    updateTestCase(request: protos.google.cloud.dialogflow.cx.v3.IUpdateTestCaseRequest, options?: CallOptions): Promise<[protos.google.cloud.dialogflow.cx.v3.ITestCase, protos.google.cloud.dialogflow.cx.v3.IUpdateTestCaseRequest | undefined, {} | undefined]>;
    updateTestCase(request: protos.google.cloud.dialogflow.cx.v3.IUpdateTestCaseRequest, options: CallOptions, callback: Callback<protos.google.cloud.dialogflow.cx.v3.ITestCase, protos.google.cloud.dialogflow.cx.v3.IUpdateTestCaseRequest | null | undefined, {} | null | undefined>): void;
    updateTestCase(request: protos.google.cloud.dialogflow.cx.v3.IUpdateTestCaseRequest, callback: Callback<protos.google.cloud.dialogflow.cx.v3.ITestCase, protos.google.cloud.dialogflow.cx.v3.IUpdateTestCaseRequest | null | undefined, {} | null | undefined>): void;
    calculateCoverage(request: protos.google.cloud.dialogflow.cx.v3.ICalculateCoverageRequest, options?: CallOptions): Promise<[protos.google.cloud.dialogflow.cx.v3.ICalculateCoverageResponse, (protos.google.cloud.dialogflow.cx.v3.ICalculateCoverageRequest | undefined), {} | undefined]>;
    calculateCoverage(request: protos.google.cloud.dialogflow.cx.v3.ICalculateCoverageRequest, options: CallOptions, callback: Callback<protos.google.cloud.dialogflow.cx.v3.ICalculateCoverageResponse, protos.google.cloud.dialogflow.cx.v3.ICalculateCoverageRequest | null | undefined, {} | null | undefined>): void;
    calculateCoverage(request: protos.google.cloud.dialogflow.cx.v3.ICalculateCoverageRequest, callback: Callback<protos.google.cloud.dialogflow.cx.v3.ICalculateCoverageResponse, protos.google.cloud.dialogflow.cx.v3.ICalculateCoverageRequest | null | undefined, {} | null | undefined>): void;
    getTestCaseResult(request: protos.google.cloud.dialogflow.cx.v3.IGetTestCaseResultRequest, options?: CallOptions): Promise<[protos.google.cloud.dialogflow.cx.v3.ITestCaseResult, (protos.google.cloud.dialogflow.cx.v3.IGetTestCaseResultRequest | undefined), {} | undefined]>;
    getTestCaseResult(request: protos.google.cloud.dialogflow.cx.v3.IGetTestCaseResultRequest, options: CallOptions, callback: Callback<protos.google.cloud.dialogflow.cx.v3.ITestCaseResult, protos.google.cloud.dialogflow.cx.v3.IGetTestCaseResultRequest | null | undefined, {} | null | undefined>): void;
    getTestCaseResult(request: protos.google.cloud.dialogflow.cx.v3.IGetTestCaseResultRequest, callback: Callback<protos.google.cloud.dialogflow.cx.v3.ITestCaseResult, protos.google.cloud.dialogflow.cx.v3.IGetTestCaseResultRequest | null | undefined, {} | null | undefined>): void;
    runTestCase(request: protos.google.cloud.dialogflow.cx.v3.IRunTestCaseRequest, options?: CallOptions): Promise<[LROperation<protos.google.cloud.dialogflow.cx.v3.IRunTestCaseResponse, protos.google.cloud.dialogflow.cx.v3.IRunTestCaseMetadata>, protos.google.longrunning.IOperation | undefined, {} | undefined]>;
    runTestCase(request: protos.google.cloud.dialogflow.cx.v3.IRunTestCaseRequest, options: CallOptions, callback: Callback<LROperation<protos.google.cloud.dialogflow.cx.v3.IRunTestCaseResponse, protos.google.cloud.dialogflow.cx.v3.IRunTestCaseMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    runTestCase(request: protos.google.cloud.dialogflow.cx.v3.IRunTestCaseRequest, callback: Callback<LROperation<protos.google.cloud.dialogflow.cx.v3.IRunTestCaseResponse, protos.google.cloud.dialogflow.cx.v3.IRunTestCaseMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `runTestCase()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
     *   for more details and examples.
     * @example
     * const decodedOperation = await checkRunTestCaseProgress(name);
     * console.log(decodedOperation.result);
     * console.log(decodedOperation.done);
     * console.log(decodedOperation.metadata);
     */
    checkRunTestCaseProgress(name: string): Promise<LROperation<protos.google.cloud.dialogflow.cx.v3.RunTestCaseResponse, protos.google.cloud.dialogflow.cx.v3.RunTestCaseMetadata>>;
    batchRunTestCases(request: protos.google.cloud.dialogflow.cx.v3.IBatchRunTestCasesRequest, options?: CallOptions): Promise<[LROperation<protos.google.cloud.dialogflow.cx.v3.IBatchRunTestCasesResponse, protos.google.cloud.dialogflow.cx.v3.IBatchRunTestCasesMetadata>, protos.google.longrunning.IOperation | undefined, {} | undefined]>;
    batchRunTestCases(request: protos.google.cloud.dialogflow.cx.v3.IBatchRunTestCasesRequest, options: CallOptions, callback: Callback<LROperation<protos.google.cloud.dialogflow.cx.v3.IBatchRunTestCasesResponse, protos.google.cloud.dialogflow.cx.v3.IBatchRunTestCasesMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    batchRunTestCases(request: protos.google.cloud.dialogflow.cx.v3.IBatchRunTestCasesRequest, callback: Callback<LROperation<protos.google.cloud.dialogflow.cx.v3.IBatchRunTestCasesResponse, protos.google.cloud.dialogflow.cx.v3.IBatchRunTestCasesMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `batchRunTestCases()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
     *   for more details and examples.
     * @example
     * const decodedOperation = await checkBatchRunTestCasesProgress(name);
     * console.log(decodedOperation.result);
     * console.log(decodedOperation.done);
     * console.log(decodedOperation.metadata);
     */
    checkBatchRunTestCasesProgress(name: string): Promise<LROperation<protos.google.cloud.dialogflow.cx.v3.BatchRunTestCasesResponse, protos.google.cloud.dialogflow.cx.v3.BatchRunTestCasesMetadata>>;
    importTestCases(request: protos.google.cloud.dialogflow.cx.v3.IImportTestCasesRequest, options?: CallOptions): Promise<[LROperation<protos.google.cloud.dialogflow.cx.v3.IImportTestCasesResponse, protos.google.cloud.dialogflow.cx.v3.IImportTestCasesMetadata>, protos.google.longrunning.IOperation | undefined, {} | undefined]>;
    importTestCases(request: protos.google.cloud.dialogflow.cx.v3.IImportTestCasesRequest, options: CallOptions, callback: Callback<LROperation<protos.google.cloud.dialogflow.cx.v3.IImportTestCasesResponse, protos.google.cloud.dialogflow.cx.v3.IImportTestCasesMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    importTestCases(request: protos.google.cloud.dialogflow.cx.v3.IImportTestCasesRequest, callback: Callback<LROperation<protos.google.cloud.dialogflow.cx.v3.IImportTestCasesResponse, protos.google.cloud.dialogflow.cx.v3.IImportTestCasesMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `importTestCases()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
     *   for more details and examples.
     * @example
     * const decodedOperation = await checkImportTestCasesProgress(name);
     * console.log(decodedOperation.result);
     * console.log(decodedOperation.done);
     * console.log(decodedOperation.metadata);
     */
    checkImportTestCasesProgress(name: string): Promise<LROperation<protos.google.cloud.dialogflow.cx.v3.ImportTestCasesResponse, protos.google.cloud.dialogflow.cx.v3.ImportTestCasesMetadata>>;
    exportTestCases(request: protos.google.cloud.dialogflow.cx.v3.IExportTestCasesRequest, options?: CallOptions): Promise<[LROperation<protos.google.cloud.dialogflow.cx.v3.IExportTestCasesResponse, protos.google.cloud.dialogflow.cx.v3.IExportTestCasesMetadata>, protos.google.longrunning.IOperation | undefined, {} | undefined]>;
    exportTestCases(request: protos.google.cloud.dialogflow.cx.v3.IExportTestCasesRequest, options: CallOptions, callback: Callback<LROperation<protos.google.cloud.dialogflow.cx.v3.IExportTestCasesResponse, protos.google.cloud.dialogflow.cx.v3.IExportTestCasesMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    exportTestCases(request: protos.google.cloud.dialogflow.cx.v3.IExportTestCasesRequest, callback: Callback<LROperation<protos.google.cloud.dialogflow.cx.v3.IExportTestCasesResponse, protos.google.cloud.dialogflow.cx.v3.IExportTestCasesMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `exportTestCases()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
     *   for more details and examples.
     * @example
     * const decodedOperation = await checkExportTestCasesProgress(name);
     * console.log(decodedOperation.result);
     * console.log(decodedOperation.done);
     * console.log(decodedOperation.metadata);
     */
    checkExportTestCasesProgress(name: string): Promise<LROperation<protos.google.cloud.dialogflow.cx.v3.ExportTestCasesResponse, protos.google.cloud.dialogflow.cx.v3.ExportTestCasesMetadata>>;
    listTestCases(request: protos.google.cloud.dialogflow.cx.v3.IListTestCasesRequest, options?: CallOptions): Promise<[protos.google.cloud.dialogflow.cx.v3.ITestCase[], protos.google.cloud.dialogflow.cx.v3.IListTestCasesRequest | null, protos.google.cloud.dialogflow.cx.v3.IListTestCasesResponse]>;
    listTestCases(request: protos.google.cloud.dialogflow.cx.v3.IListTestCasesRequest, options: CallOptions, callback: PaginationCallback<protos.google.cloud.dialogflow.cx.v3.IListTestCasesRequest, protos.google.cloud.dialogflow.cx.v3.IListTestCasesResponse | null | undefined, protos.google.cloud.dialogflow.cx.v3.ITestCase>): void;
    listTestCases(request: protos.google.cloud.dialogflow.cx.v3.IListTestCasesRequest, callback: PaginationCallback<protos.google.cloud.dialogflow.cx.v3.IListTestCasesRequest, protos.google.cloud.dialogflow.cx.v3.IListTestCasesResponse | null | undefined, protos.google.cloud.dialogflow.cx.v3.ITestCase>): void;
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The agent to list all pages for.
     *   Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>`.
     * @param {number} request.pageSize
     *   The maximum number of items to return in a single page. By default 20.
     *   Note that when TestCaseView = FULL, the maximum page size allowed is 20.
     *   When TestCaseView = BASIC, the maximum page size allowed is 500.
     * @param {string} request.pageToken
     *   The next_page_token value returned from a previous list request.
     * @param {google.cloud.dialogflow.cx.v3.ListTestCasesRequest.TestCaseView} request.view
     *   Specifies whether response should include all fields or just the metadata.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing [TestCase]{@link google.cloud.dialogflow.cx.v3.TestCase} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listTestCasesAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     */
    listTestCasesStream(request?: protos.google.cloud.dialogflow.cx.v3.IListTestCasesRequest, options?: CallOptions): Transform;
    /**
     * Equivalent to `listTestCases`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The agent to list all pages for.
     *   Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>`.
     * @param {number} request.pageSize
     *   The maximum number of items to return in a single page. By default 20.
     *   Note that when TestCaseView = FULL, the maximum page size allowed is 20.
     *   When TestCaseView = BASIC, the maximum page size allowed is 500.
     * @param {string} request.pageToken
     *   The next_page_token value returned from a previous list request.
     * @param {google.cloud.dialogflow.cx.v3.ListTestCasesRequest.TestCaseView} request.view
     *   Specifies whether response should include all fields or just the metadata.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
     *   When you iterate the returned iterable, each element will be an object representing
     *   [TestCase]{@link google.cloud.dialogflow.cx.v3.TestCase}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     * @example
     * const iterable = client.listTestCasesAsync(request);
     * for await (const response of iterable) {
     *   // process response
     * }
     */
    listTestCasesAsync(request?: protos.google.cloud.dialogflow.cx.v3.IListTestCasesRequest, options?: CallOptions): AsyncIterable<protos.google.cloud.dialogflow.cx.v3.ITestCase>;
    listTestCaseResults(request: protos.google.cloud.dialogflow.cx.v3.IListTestCaseResultsRequest, options?: CallOptions): Promise<[protos.google.cloud.dialogflow.cx.v3.ITestCaseResult[], protos.google.cloud.dialogflow.cx.v3.IListTestCaseResultsRequest | null, protos.google.cloud.dialogflow.cx.v3.IListTestCaseResultsResponse]>;
    listTestCaseResults(request: protos.google.cloud.dialogflow.cx.v3.IListTestCaseResultsRequest, options: CallOptions, callback: PaginationCallback<protos.google.cloud.dialogflow.cx.v3.IListTestCaseResultsRequest, protos.google.cloud.dialogflow.cx.v3.IListTestCaseResultsResponse | null | undefined, protos.google.cloud.dialogflow.cx.v3.ITestCaseResult>): void;
    listTestCaseResults(request: protos.google.cloud.dialogflow.cx.v3.IListTestCaseResultsRequest, callback: PaginationCallback<protos.google.cloud.dialogflow.cx.v3.IListTestCaseResultsRequest, protos.google.cloud.dialogflow.cx.v3.IListTestCaseResultsResponse | null | undefined, protos.google.cloud.dialogflow.cx.v3.ITestCaseResult>): void;
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The test case to list results for.
     *   Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/
     *   testCases/<TestCase ID>`. Specify a `-` as a wildcard for TestCase ID to
     *   list results across multiple test cases.
     * @param {number} request.pageSize
     *   The maximum number of items to return in a single page. By default 100 and
     *   at most 1000.
     * @param {string} request.pageToken
     *   The next_page_token value returned from a previous list request.
     * @param {string} request.filter
     *   The filter expression used to filter test case results. See
     *   [API Filtering](https://aip.dev/160).
     *
     *   The expression is case insensitive. Only 'AND' is supported for logical
     *   operators. The supported syntax is listed below in detail:
     *
     *     <field> <operator> <value> [AND <field> <operator> <value>] ...
     *     [AND latest]
     *
     *   The supported fields and operators are:
     *   field                 operator
     *   `environment`         `=`, `IN`  (Use value `draft` for draft environment)
     *   `test_time`           `>`, `<`
     *
     *   `latest` only returns the latest test result in all results for each test
     *   case.
     *
     *   Examples:
     *   *   "environment=draft AND latest" matches the latest test result for each
     *       test case in the draft environment.
     *   *   "environment IN (e1,e2)" matches any test case results with an
     *       environment resource name of either "e1" or "e2".
     *   *   "test_time > 1602540713" matches any test case results with test time
     *       later than a unix timestamp in seconds 1602540713.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing [TestCaseResult]{@link google.cloud.dialogflow.cx.v3.TestCaseResult} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listTestCaseResultsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     */
    listTestCaseResultsStream(request?: protos.google.cloud.dialogflow.cx.v3.IListTestCaseResultsRequest, options?: CallOptions): Transform;
    /**
     * Equivalent to `listTestCaseResults`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The test case to list results for.
     *   Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/
     *   testCases/<TestCase ID>`. Specify a `-` as a wildcard for TestCase ID to
     *   list results across multiple test cases.
     * @param {number} request.pageSize
     *   The maximum number of items to return in a single page. By default 100 and
     *   at most 1000.
     * @param {string} request.pageToken
     *   The next_page_token value returned from a previous list request.
     * @param {string} request.filter
     *   The filter expression used to filter test case results. See
     *   [API Filtering](https://aip.dev/160).
     *
     *   The expression is case insensitive. Only 'AND' is supported for logical
     *   operators. The supported syntax is listed below in detail:
     *
     *     <field> <operator> <value> [AND <field> <operator> <value>] ...
     *     [AND latest]
     *
     *   The supported fields and operators are:
     *   field                 operator
     *   `environment`         `=`, `IN`  (Use value `draft` for draft environment)
     *   `test_time`           `>`, `<`
     *
     *   `latest` only returns the latest test result in all results for each test
     *   case.
     *
     *   Examples:
     *   *   "environment=draft AND latest" matches the latest test result for each
     *       test case in the draft environment.
     *   *   "environment IN (e1,e2)" matches any test case results with an
     *       environment resource name of either "e1" or "e2".
     *   *   "test_time > 1602540713" matches any test case results with test time
     *       later than a unix timestamp in seconds 1602540713.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
     *   When you iterate the returned iterable, each element will be an object representing
     *   [TestCaseResult]{@link google.cloud.dialogflow.cx.v3.TestCaseResult}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     * @example
     * const iterable = client.listTestCaseResultsAsync(request);
     * for await (const response of iterable) {
     *   // process response
     * }
     */
    listTestCaseResultsAsync(request?: protos.google.cloud.dialogflow.cx.v3.IListTestCaseResultsRequest, options?: CallOptions): AsyncIterable<protos.google.cloud.dialogflow.cx.v3.ITestCaseResult>;
    /**
     * Return a fully-qualified agent resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} agent
     * @returns {string} Resource name string.
     */
    agentPath(project: string, location: string, agent: string): string;
    /**
     * Parse the project from Agent resource.
     *
     * @param {string} agentName
     *   A fully-qualified path representing Agent resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromAgentName(agentName: string): string | number;
    /**
     * Parse the location from Agent resource.
     *
     * @param {string} agentName
     *   A fully-qualified path representing Agent resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromAgentName(agentName: string): string | number;
    /**
     * Parse the agent from Agent resource.
     *
     * @param {string} agentName
     *   A fully-qualified path representing Agent resource.
     * @returns {string} A string representing the agent.
     */
    matchAgentFromAgentName(agentName: string): string | number;
    /**
     * Return a fully-qualified agentValidationResult resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} agent
     * @returns {string} Resource name string.
     */
    agentValidationResultPath(project: string, location: string, agent: string): string;
    /**
     * Parse the project from AgentValidationResult resource.
     *
     * @param {string} agentValidationResultName
     *   A fully-qualified path representing AgentValidationResult resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromAgentValidationResultName(agentValidationResultName: string): string | number;
    /**
     * Parse the location from AgentValidationResult resource.
     *
     * @param {string} agentValidationResultName
     *   A fully-qualified path representing AgentValidationResult resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromAgentValidationResultName(agentValidationResultName: string): string | number;
    /**
     * Parse the agent from AgentValidationResult resource.
     *
     * @param {string} agentValidationResultName
     *   A fully-qualified path representing AgentValidationResult resource.
     * @returns {string} A string representing the agent.
     */
    matchAgentFromAgentValidationResultName(agentValidationResultName: string): string | number;
    /**
     * Return a fully-qualified entityType resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} agent
     * @param {string} entity_type
     * @returns {string} Resource name string.
     */
    entityTypePath(project: string, location: string, agent: string, entityType: string): string;
    /**
     * Parse the project from EntityType resource.
     *
     * @param {string} entityTypeName
     *   A fully-qualified path representing EntityType resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromEntityTypeName(entityTypeName: string): string | number;
    /**
     * Parse the location from EntityType resource.
     *
     * @param {string} entityTypeName
     *   A fully-qualified path representing EntityType resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromEntityTypeName(entityTypeName: string): string | number;
    /**
     * Parse the agent from EntityType resource.
     *
     * @param {string} entityTypeName
     *   A fully-qualified path representing EntityType resource.
     * @returns {string} A string representing the agent.
     */
    matchAgentFromEntityTypeName(entityTypeName: string): string | number;
    /**
     * Parse the entity_type from EntityType resource.
     *
     * @param {string} entityTypeName
     *   A fully-qualified path representing EntityType resource.
     * @returns {string} A string representing the entity_type.
     */
    matchEntityTypeFromEntityTypeName(entityTypeName: string): string | number;
    /**
     * Return a fully-qualified environment resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} agent
     * @param {string} environment
     * @returns {string} Resource name string.
     */
    environmentPath(project: string, location: string, agent: string, environment: string): string;
    /**
     * Parse the project from Environment resource.
     *
     * @param {string} environmentName
     *   A fully-qualified path representing Environment resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromEnvironmentName(environmentName: string): string | number;
    /**
     * Parse the location from Environment resource.
     *
     * @param {string} environmentName
     *   A fully-qualified path representing Environment resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromEnvironmentName(environmentName: string): string | number;
    /**
     * Parse the agent from Environment resource.
     *
     * @param {string} environmentName
     *   A fully-qualified path representing Environment resource.
     * @returns {string} A string representing the agent.
     */
    matchAgentFromEnvironmentName(environmentName: string): string | number;
    /**
     * Parse the environment from Environment resource.
     *
     * @param {string} environmentName
     *   A fully-qualified path representing Environment resource.
     * @returns {string} A string representing the environment.
     */
    matchEnvironmentFromEnvironmentName(environmentName: string): string | number;
    /**
     * Return a fully-qualified experiment resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} agent
     * @param {string} environment
     * @param {string} experiment
     * @returns {string} Resource name string.
     */
    experimentPath(project: string, location: string, agent: string, environment: string, experiment: string): string;
    /**
     * Parse the project from Experiment resource.
     *
     * @param {string} experimentName
     *   A fully-qualified path representing Experiment resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromExperimentName(experimentName: string): string | number;
    /**
     * Parse the location from Experiment resource.
     *
     * @param {string} experimentName
     *   A fully-qualified path representing Experiment resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromExperimentName(experimentName: string): string | number;
    /**
     * Parse the agent from Experiment resource.
     *
     * @param {string} experimentName
     *   A fully-qualified path representing Experiment resource.
     * @returns {string} A string representing the agent.
     */
    matchAgentFromExperimentName(experimentName: string): string | number;
    /**
     * Parse the environment from Experiment resource.
     *
     * @param {string} experimentName
     *   A fully-qualified path representing Experiment resource.
     * @returns {string} A string representing the environment.
     */
    matchEnvironmentFromExperimentName(experimentName: string): string | number;
    /**
     * Parse the experiment from Experiment resource.
     *
     * @param {string} experimentName
     *   A fully-qualified path representing Experiment resource.
     * @returns {string} A string representing the experiment.
     */
    matchExperimentFromExperimentName(experimentName: string): string | number;
    /**
     * Return a fully-qualified flow resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} agent
     * @param {string} flow
     * @returns {string} Resource name string.
     */
    flowPath(project: string, location: string, agent: string, flow: string): string;
    /**
     * Parse the project from Flow resource.
     *
     * @param {string} flowName
     *   A fully-qualified path representing Flow resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromFlowName(flowName: string): string | number;
    /**
     * Parse the location from Flow resource.
     *
     * @param {string} flowName
     *   A fully-qualified path representing Flow resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromFlowName(flowName: string): string | number;
    /**
     * Parse the agent from Flow resource.
     *
     * @param {string} flowName
     *   A fully-qualified path representing Flow resource.
     * @returns {string} A string representing the agent.
     */
    matchAgentFromFlowName(flowName: string): string | number;
    /**
     * Parse the flow from Flow resource.
     *
     * @param {string} flowName
     *   A fully-qualified path representing Flow resource.
     * @returns {string} A string representing the flow.
     */
    matchFlowFromFlowName(flowName: string): string | number;
    /**
     * Return a fully-qualified flowValidationResult resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} agent
     * @param {string} flow
     * @returns {string} Resource name string.
     */
    flowValidationResultPath(project: string, location: string, agent: string, flow: string): string;
    /**
     * Parse the project from FlowValidationResult resource.
     *
     * @param {string} flowValidationResultName
     *   A fully-qualified path representing FlowValidationResult resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromFlowValidationResultName(flowValidationResultName: string): string | number;
    /**
     * Parse the location from FlowValidationResult resource.
     *
     * @param {string} flowValidationResultName
     *   A fully-qualified path representing FlowValidationResult resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromFlowValidationResultName(flowValidationResultName: string): string | number;
    /**
     * Parse the agent from FlowValidationResult resource.
     *
     * @param {string} flowValidationResultName
     *   A fully-qualified path representing FlowValidationResult resource.
     * @returns {string} A string representing the agent.
     */
    matchAgentFromFlowValidationResultName(flowValidationResultName: string): string | number;
    /**
     * Parse the flow from FlowValidationResult resource.
     *
     * @param {string} flowValidationResultName
     *   A fully-qualified path representing FlowValidationResult resource.
     * @returns {string} A string representing the flow.
     */
    matchFlowFromFlowValidationResultName(flowValidationResultName: string): string | number;
    /**
     * Return a fully-qualified intent resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} agent
     * @param {string} intent
     * @returns {string} Resource name string.
     */
    intentPath(project: string, location: string, agent: string, intent: string): string;
    /**
     * Parse the project from Intent resource.
     *
     * @param {string} intentName
     *   A fully-qualified path representing Intent resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromIntentName(intentName: string): string | number;
    /**
     * Parse the location from Intent resource.
     *
     * @param {string} intentName
     *   A fully-qualified path representing Intent resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromIntentName(intentName: string): string | number;
    /**
     * Parse the agent from Intent resource.
     *
     * @param {string} intentName
     *   A fully-qualified path representing Intent resource.
     * @returns {string} A string representing the agent.
     */
    matchAgentFromIntentName(intentName: string): string | number;
    /**
     * Parse the intent from Intent resource.
     *
     * @param {string} intentName
     *   A fully-qualified path representing Intent resource.
     * @returns {string} A string representing the intent.
     */
    matchIntentFromIntentName(intentName: string): string | number;
    /**
     * Return a fully-qualified location resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @returns {string} Resource name string.
     */
    locationPath(project: string, location: string): string;
    /**
     * Parse the project from Location resource.
     *
     * @param {string} locationName
     *   A fully-qualified path representing Location resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromLocationName(locationName: string): string | number;
    /**
     * Parse the location from Location resource.
     *
     * @param {string} locationName
     *   A fully-qualified path representing Location resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromLocationName(locationName: string): string | number;
    /**
     * Return a fully-qualified page resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} agent
     * @param {string} flow
     * @param {string} page
     * @returns {string} Resource name string.
     */
    pagePath(project: string, location: string, agent: string, flow: string, page: string): string;
    /**
     * Parse the project from Page resource.
     *
     * @param {string} pageName
     *   A fully-qualified path representing Page resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromPageName(pageName: string): string | number;
    /**
     * Parse the location from Page resource.
     *
     * @param {string} pageName
     *   A fully-qualified path representing Page resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromPageName(pageName: string): string | number;
    /**
     * Parse the agent from Page resource.
     *
     * @param {string} pageName
     *   A fully-qualified path representing Page resource.
     * @returns {string} A string representing the agent.
     */
    matchAgentFromPageName(pageName: string): string | number;
    /**
     * Parse the flow from Page resource.
     *
     * @param {string} pageName
     *   A fully-qualified path representing Page resource.
     * @returns {string} A string representing the flow.
     */
    matchFlowFromPageName(pageName: string): string | number;
    /**
     * Parse the page from Page resource.
     *
     * @param {string} pageName
     *   A fully-qualified path representing Page resource.
     * @returns {string} A string representing the page.
     */
    matchPageFromPageName(pageName: string): string | number;
    /**
     * Return a fully-qualified project resource name string.
     *
     * @param {string} project
     * @returns {string} Resource name string.
     */
    projectPath(project: string): string;
    /**
     * Parse the project from Project resource.
     *
     * @param {string} projectName
     *   A fully-qualified path representing Project resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectName(projectName: string): string | number;
    /**
     * Return a fully-qualified projectLocationAgentEnvironmentSessionEntityType resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} agent
     * @param {string} environment
     * @param {string} session
     * @param {string} entity_type
     * @returns {string} Resource name string.
     */
    projectLocationAgentEnvironmentSessionEntityTypePath(project: string, location: string, agent: string, environment: string, session: string, entityType: string): string;
    /**
     * Parse the project from ProjectLocationAgentEnvironmentSessionEntityType resource.
     *
     * @param {string} projectLocationAgentEnvironmentSessionEntityTypeName
     *   A fully-qualified path representing project_location_agent_environment_session_entity_type resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectLocationAgentEnvironmentSessionEntityTypeName(projectLocationAgentEnvironmentSessionEntityTypeName: string): string | number;
    /**
     * Parse the location from ProjectLocationAgentEnvironmentSessionEntityType resource.
     *
     * @param {string} projectLocationAgentEnvironmentSessionEntityTypeName
     *   A fully-qualified path representing project_location_agent_environment_session_entity_type resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromProjectLocationAgentEnvironmentSessionEntityTypeName(projectLocationAgentEnvironmentSessionEntityTypeName: string): string | number;
    /**
     * Parse the agent from ProjectLocationAgentEnvironmentSessionEntityType resource.
     *
     * @param {string} projectLocationAgentEnvironmentSessionEntityTypeName
     *   A fully-qualified path representing project_location_agent_environment_session_entity_type resource.
     * @returns {string} A string representing the agent.
     */
    matchAgentFromProjectLocationAgentEnvironmentSessionEntityTypeName(projectLocationAgentEnvironmentSessionEntityTypeName: string): string | number;
    /**
     * Parse the environment from ProjectLocationAgentEnvironmentSessionEntityType resource.
     *
     * @param {string} projectLocationAgentEnvironmentSessionEntityTypeName
     *   A fully-qualified path representing project_location_agent_environment_session_entity_type resource.
     * @returns {string} A string representing the environment.
     */
    matchEnvironmentFromProjectLocationAgentEnvironmentSessionEntityTypeName(projectLocationAgentEnvironmentSessionEntityTypeName: string): string | number;
    /**
     * Parse the session from ProjectLocationAgentEnvironmentSessionEntityType resource.
     *
     * @param {string} projectLocationAgentEnvironmentSessionEntityTypeName
     *   A fully-qualified path representing project_location_agent_environment_session_entity_type resource.
     * @returns {string} A string representing the session.
     */
    matchSessionFromProjectLocationAgentEnvironmentSessionEntityTypeName(projectLocationAgentEnvironmentSessionEntityTypeName: string): string | number;
    /**
     * Parse the entity_type from ProjectLocationAgentEnvironmentSessionEntityType resource.
     *
     * @param {string} projectLocationAgentEnvironmentSessionEntityTypeName
     *   A fully-qualified path representing project_location_agent_environment_session_entity_type resource.
     * @returns {string} A string representing the entity_type.
     */
    matchEntityTypeFromProjectLocationAgentEnvironmentSessionEntityTypeName(projectLocationAgentEnvironmentSessionEntityTypeName: string): string | number;
    /**
     * Return a fully-qualified projectLocationAgentSessionEntityType resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} agent
     * @param {string} session
     * @param {string} entity_type
     * @returns {string} Resource name string.
     */
    projectLocationAgentSessionEntityTypePath(project: string, location: string, agent: string, session: string, entityType: string): string;
    /**
     * Parse the project from ProjectLocationAgentSessionEntityType resource.
     *
     * @param {string} projectLocationAgentSessionEntityTypeName
     *   A fully-qualified path representing project_location_agent_session_entity_type resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectLocationAgentSessionEntityTypeName(projectLocationAgentSessionEntityTypeName: string): string | number;
    /**
     * Parse the location from ProjectLocationAgentSessionEntityType resource.
     *
     * @param {string} projectLocationAgentSessionEntityTypeName
     *   A fully-qualified path representing project_location_agent_session_entity_type resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromProjectLocationAgentSessionEntityTypeName(projectLocationAgentSessionEntityTypeName: string): string | number;
    /**
     * Parse the agent from ProjectLocationAgentSessionEntityType resource.
     *
     * @param {string} projectLocationAgentSessionEntityTypeName
     *   A fully-qualified path representing project_location_agent_session_entity_type resource.
     * @returns {string} A string representing the agent.
     */
    matchAgentFromProjectLocationAgentSessionEntityTypeName(projectLocationAgentSessionEntityTypeName: string): string | number;
    /**
     * Parse the session from ProjectLocationAgentSessionEntityType resource.
     *
     * @param {string} projectLocationAgentSessionEntityTypeName
     *   A fully-qualified path representing project_location_agent_session_entity_type resource.
     * @returns {string} A string representing the session.
     */
    matchSessionFromProjectLocationAgentSessionEntityTypeName(projectLocationAgentSessionEntityTypeName: string): string | number;
    /**
     * Parse the entity_type from ProjectLocationAgentSessionEntityType resource.
     *
     * @param {string} projectLocationAgentSessionEntityTypeName
     *   A fully-qualified path representing project_location_agent_session_entity_type resource.
     * @returns {string} A string representing the entity_type.
     */
    matchEntityTypeFromProjectLocationAgentSessionEntityTypeName(projectLocationAgentSessionEntityTypeName: string): string | number;
    /**
     * Return a fully-qualified securitySettings resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} security_settings
     * @returns {string} Resource name string.
     */
    securitySettingsPath(project: string, location: string, securitySettings: string): string;
    /**
     * Parse the project from SecuritySettings resource.
     *
     * @param {string} securitySettingsName
     *   A fully-qualified path representing SecuritySettings resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromSecuritySettingsName(securitySettingsName: string): string | number;
    /**
     * Parse the location from SecuritySettings resource.
     *
     * @param {string} securitySettingsName
     *   A fully-qualified path representing SecuritySettings resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromSecuritySettingsName(securitySettingsName: string): string | number;
    /**
     * Parse the security_settings from SecuritySettings resource.
     *
     * @param {string} securitySettingsName
     *   A fully-qualified path representing SecuritySettings resource.
     * @returns {string} A string representing the security_settings.
     */
    matchSecuritySettingsFromSecuritySettingsName(securitySettingsName: string): string | number;
    /**
     * Return a fully-qualified testCase resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} agent
     * @param {string} test_case
     * @returns {string} Resource name string.
     */
    testCasePath(project: string, location: string, agent: string, testCase: string): string;
    /**
     * Parse the project from TestCase resource.
     *
     * @param {string} testCaseName
     *   A fully-qualified path representing TestCase resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromTestCaseName(testCaseName: string): string | number;
    /**
     * Parse the location from TestCase resource.
     *
     * @param {string} testCaseName
     *   A fully-qualified path representing TestCase resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromTestCaseName(testCaseName: string): string | number;
    /**
     * Parse the agent from TestCase resource.
     *
     * @param {string} testCaseName
     *   A fully-qualified path representing TestCase resource.
     * @returns {string} A string representing the agent.
     */
    matchAgentFromTestCaseName(testCaseName: string): string | number;
    /**
     * Parse the test_case from TestCase resource.
     *
     * @param {string} testCaseName
     *   A fully-qualified path representing TestCase resource.
     * @returns {string} A string representing the test_case.
     */
    matchTestCaseFromTestCaseName(testCaseName: string): string | number;
    /**
     * Return a fully-qualified testCaseResult resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} agent
     * @param {string} test_case
     * @param {string} result
     * @returns {string} Resource name string.
     */
    testCaseResultPath(project: string, location: string, agent: string, testCase: string, result: string): string;
    /**
     * Parse the project from TestCaseResult resource.
     *
     * @param {string} testCaseResultName
     *   A fully-qualified path representing TestCaseResult resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromTestCaseResultName(testCaseResultName: string): string | number;
    /**
     * Parse the location from TestCaseResult resource.
     *
     * @param {string} testCaseResultName
     *   A fully-qualified path representing TestCaseResult resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromTestCaseResultName(testCaseResultName: string): string | number;
    /**
     * Parse the agent from TestCaseResult resource.
     *
     * @param {string} testCaseResultName
     *   A fully-qualified path representing TestCaseResult resource.
     * @returns {string} A string representing the agent.
     */
    matchAgentFromTestCaseResultName(testCaseResultName: string): string | number;
    /**
     * Parse the test_case from TestCaseResult resource.
     *
     * @param {string} testCaseResultName
     *   A fully-qualified path representing TestCaseResult resource.
     * @returns {string} A string representing the test_case.
     */
    matchTestCaseFromTestCaseResultName(testCaseResultName: string): string | number;
    /**
     * Parse the result from TestCaseResult resource.
     *
     * @param {string} testCaseResultName
     *   A fully-qualified path representing TestCaseResult resource.
     * @returns {string} A string representing the result.
     */
    matchResultFromTestCaseResultName(testCaseResultName: string): string | number;
    /**
     * Return a fully-qualified transitionRouteGroup resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} agent
     * @param {string} flow
     * @param {string} transition_route_group
     * @returns {string} Resource name string.
     */
    transitionRouteGroupPath(project: string, location: string, agent: string, flow: string, transitionRouteGroup: string): string;
    /**
     * Parse the project from TransitionRouteGroup resource.
     *
     * @param {string} transitionRouteGroupName
     *   A fully-qualified path representing TransitionRouteGroup resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromTransitionRouteGroupName(transitionRouteGroupName: string): string | number;
    /**
     * Parse the location from TransitionRouteGroup resource.
     *
     * @param {string} transitionRouteGroupName
     *   A fully-qualified path representing TransitionRouteGroup resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromTransitionRouteGroupName(transitionRouteGroupName: string): string | number;
    /**
     * Parse the agent from TransitionRouteGroup resource.
     *
     * @param {string} transitionRouteGroupName
     *   A fully-qualified path representing TransitionRouteGroup resource.
     * @returns {string} A string representing the agent.
     */
    matchAgentFromTransitionRouteGroupName(transitionRouteGroupName: string): string | number;
    /**
     * Parse the flow from TransitionRouteGroup resource.
     *
     * @param {string} transitionRouteGroupName
     *   A fully-qualified path representing TransitionRouteGroup resource.
     * @returns {string} A string representing the flow.
     */
    matchFlowFromTransitionRouteGroupName(transitionRouteGroupName: string): string | number;
    /**
     * Parse the transition_route_group from TransitionRouteGroup resource.
     *
     * @param {string} transitionRouteGroupName
     *   A fully-qualified path representing TransitionRouteGroup resource.
     * @returns {string} A string representing the transition_route_group.
     */
    matchTransitionRouteGroupFromTransitionRouteGroupName(transitionRouteGroupName: string): string | number;
    /**
     * Return a fully-qualified version resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} agent
     * @param {string} flow
     * @param {string} version
     * @returns {string} Resource name string.
     */
    versionPath(project: string, location: string, agent: string, flow: string, version: string): string;
    /**
     * Parse the project from Version resource.
     *
     * @param {string} versionName
     *   A fully-qualified path representing Version resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromVersionName(versionName: string): string | number;
    /**
     * Parse the location from Version resource.
     *
     * @param {string} versionName
     *   A fully-qualified path representing Version resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromVersionName(versionName: string): string | number;
    /**
     * Parse the agent from Version resource.
     *
     * @param {string} versionName
     *   A fully-qualified path representing Version resource.
     * @returns {string} A string representing the agent.
     */
    matchAgentFromVersionName(versionName: string): string | number;
    /**
     * Parse the flow from Version resource.
     *
     * @param {string} versionName
     *   A fully-qualified path representing Version resource.
     * @returns {string} A string representing the flow.
     */
    matchFlowFromVersionName(versionName: string): string | number;
    /**
     * Parse the version from Version resource.
     *
     * @param {string} versionName
     *   A fully-qualified path representing Version resource.
     * @returns {string} A string representing the version.
     */
    matchVersionFromVersionName(versionName: string): string | number;
    /**
     * Return a fully-qualified webhook resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} agent
     * @param {string} webhook
     * @returns {string} Resource name string.
     */
    webhookPath(project: string, location: string, agent: string, webhook: string): string;
    /**
     * Parse the project from Webhook resource.
     *
     * @param {string} webhookName
     *   A fully-qualified path representing Webhook resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromWebhookName(webhookName: string): string | number;
    /**
     * Parse the location from Webhook resource.
     *
     * @param {string} webhookName
     *   A fully-qualified path representing Webhook resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromWebhookName(webhookName: string): string | number;
    /**
     * Parse the agent from Webhook resource.
     *
     * @param {string} webhookName
     *   A fully-qualified path representing Webhook resource.
     * @returns {string} A string representing the agent.
     */
    matchAgentFromWebhookName(webhookName: string): string | number;
    /**
     * Parse the webhook from Webhook resource.
     *
     * @param {string} webhookName
     *   A fully-qualified path representing Webhook resource.
     * @returns {string} A string representing the webhook.
     */
    matchWebhookFromWebhookName(webhookName: string): string | number;
    /**
     * Terminate the gRPC channel and close the client.
     *
     * The client will no longer be usable and all future behavior is undefined.
     * @returns {Promise} A promise that resolves when the client is closed.
     */
    close(): Promise<void>;
}
